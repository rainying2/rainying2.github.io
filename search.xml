<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTTP协议</title>
    <url>/2019/08/29/HTTP%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><h2 id="HTTP协议的概述"><a href="#HTTP协议的概述" class="headerlink" title="HTTP协议的概述"></a>HTTP协议的概述</h2><h3 id="什么是HTTP协议"><a href="#什么是HTTP协议" class="headerlink" title="什么是HTTP协议"></a>什么是HTTP协议</h3><p> <img src="https://img-blog.csdnimg.cn/20201002012352231.png?size_24#pic_center" alt="HTTP协议定义"><br>HTTP协议:规定了浏览器和服务器端的数据交互的格式</p>
<h3 id="HTTP的特性"><a href="#HTTP的特性" class="headerlink" title="HTTP的特性"></a>HTTP的特性</h3><ul>
<li>基于请求和响应模型</li>
</ul>
<ol>
<li>必须要先有请求，后有响应。</li>
<li>请求和响应必须成对出现</li>
</ol>
<ul>
<li>简单快捷</li>
</ul>
<ol>
<li>因为发送请求的时候只需要发送请求方式和请求路径即可</li>
</ol>
<h3 id="HTTP版本"><a href="#HTTP版本" class="headerlink" title="HTTP版本"></a>HTTP版本</h3><ul>
<li>HTTP1.0：旧版本，一次请求得到一次响应之后就断开</li>
<li><font color="red">HTTP1.1：现阶段使用版本，一次请求得到响应之后不会立即断开，可以继续请求和响应。只有无请求和响应相隔一段时间后，才断开。</font></li>
</ul>
<h2 id="请求部分可以分成三块"><a href="#请求部分可以分成三块" class="headerlink" title="请求部分可以分成三块"></a>请求部分可以分成三块</h2><p><img src="https://img-blog.csdnimg.cn/20201002012740240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_24,color_FFFFFF,t_70#pic_center" alt="请求部分"></p>
<ul>
<li><p>请求行</p>
<ul>
<li><font color="red">请求方式</font><ul>
<li><font color="red">请求方式有很多种，常用就两种GET和POST</font></li>
<li><font color="red">GET和POST的区别?</font><ul>
<li><font color="red"> GET：请求的参数会显示到地址栏。通常是有大小的限制。没有请求体</font></li>
<li><font color="red">POST：请求的参数不会显示到地址栏（在请求体中）。POST没有大小的限制。有请求体（请求参数）。只有表单设置 method=”post”才是post请求。</font></li>
</ul>
</li>
</ul>
</li>
<li>请求路径</li>
<li>协议版本</li>
</ul>
</li>
<li><p>请求头</p>
<ul>
<li>请求头的格式一般都是一个key对应一个value的，也有一个key对应多个 value的情况。</li>
<li>记住一些请求头：</li>
</ul>
<ol>
<li>Referer：&emsp;&emsp;&emsp;&emsp;代表网页的未源。（防盗链）</li>
<li>User-Agent：&emsp;&emsp; 获得客户端浏览器类型</li>
</ol>
</li>
<li><p>请求体</p>
<ul>
<li>只有POST请求方式才有请求体，而且请求体是POST方式请求参数。</li>
</ul>
</li>
</ul>
<h2 id="响应部分可以分成三块"><a href="#响应部分可以分成三块" class="headerlink" title="响应部分可以分成三块"></a>响应部分可以分成三块</h2><p> <img src="https://img-blog.csdnimg.cn/20201002013438658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="响应部分"></p>
<ul>
<li><p>响应行</p>
<ul>
<li><p>协议版本</p>
</li>
<li><p><font color="red">状态码</font></p>
<blockquote>
<p><font color="red">200：代表响应成功</font><br><font color="red">302：需要进行重定向操作</font><br><font color="red">304：需要查找本地缓存</font><br><font color="red">404：请求资源不存在</font><br><font color="red">500：服务器内部错误</font></p>
</blockquote>
</li>
<li><p>状态码描述</p>
</li>
</ul>
</li>
<li><p>响应头</p>
<ul>
<li>通常一个key对应一个 value，也有一个key对应多个 value。</li>
<li>记住响应头：<ol>
<li>Location：重定向的路径。</li>
<li>Refresh：定时刷新。</li>
<li>Content-Disposition：文件下载的时候使用。</li>
</ol>
</li>
</ul>
</li>
<li><p>响应体</p>
<ul>
<li>就是显示到浏览器上页面的代码。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTTP协议</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON</title>
    <url>/2019/09/01/JSON/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="json介绍"><a href="#json介绍" class="headerlink" title="json介绍"></a>json介绍</h1><p>JSON(JavaScript Object Notation)是一种轻量级的数据交换格式<br>json简单说就是javascript中的对象和数组<br>对象：<code>&#123;key:value,key:value,….&#125;</code><br>数组：<code>[”java”,”javascript”,”vb”,….]</code></p>
<p>注意：在json中它的两种结构可以互相嵌套<br><code>&#123;key:[value1,value2],key:value&#125;</code><br><code>[&#123;name:xxx&#125;,&#123;key:value&#125;,&#123;key:value&#125;]</code></p>
<h1 id="Fastjson介绍"><a href="#Fastjson介绍" class="headerlink" title="Fastjson介绍"></a>Fastjson介绍</h1><p>将java的对象转换成json数据也可以将一个json转换成java对象（不常用)）Fastjson是阿里提供的一个开源json插件<br>对于json处理的插件        fastison        jsonlib        flexison        Jackson</p>
<p>Fastjson使用介绍</p>
<ol>
<li><p>导入相应的jar包</p>
<img src="https://img-blog.csdnimg.cn/20201003094525408.png#pic_center" alt="相应jar包" style="zoom:150%;" />
</li>
<li><p>演示 fastison将java对象转换成json数据</p>
</li>
</ol>
<blockquote>
<p>String  json=JSONObject.toJsonString(java对象);</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将一个Project对象转化为json</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//1.创建一个Project对象</span></span><br><span class="line">		Project p1 = <span class="keyword">new</span> Project();</span><br><span class="line">		p1.setId(<span class="number">1</span>);</span><br><span class="line">		p1.setCount(<span class="number">100</span>);</span><br><span class="line">		p1.setName(<span class="string">&quot;电视机&quot;</span>);</span><br><span class="line">		p1.setPrice(<span class="number">2000</span>);</span><br><span class="line">		p1.setpDate(<span class="keyword">new</span> Date());</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//2.使用fastjson将p1转换成json数据</span></span><br><span class="line">		<span class="comment">//&#123;id:xxx,name:xxx,price:xxx,count:xxx&#125;</span></span><br><span class="line">		</span><br><span class="line">		String json = JSONObject.toJSONString(p1);</span><br><span class="line">		System.out.println(json);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//将List&lt;Project&gt;对象转换成json</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//1.创建一个List&lt;Project&gt;对象</span></span><br><span class="line">		Project p1 = <span class="keyword">new</span> Project();</span><br><span class="line">		p1.setId(<span class="number">1</span>);</span><br><span class="line">		p1.setCount(<span class="number">200</span>);</span><br><span class="line">		p1.setName(<span class="string">&quot;电视机&quot;</span>);</span><br><span class="line">		p1.setPrice(<span class="number">2000</span>);</span><br><span class="line">		</span><br><span class="line">		Project p2 = <span class="keyword">new</span> Project();</span><br><span class="line">		p2.setId(<span class="number">2</span>);</span><br><span class="line">		p2.setCount(<span class="number">200</span>);</span><br><span class="line">		p2.setName(<span class="string">&quot;洗衣机&quot;</span>);</span><br><span class="line">		p2.setPrice(<span class="number">1000</span>);</span><br><span class="line">		</span><br><span class="line">		List&lt;Project&gt; list = <span class="keyword">new</span> ArrayList&lt;Project&gt;();</span><br><span class="line">		list.add(p1);</span><br><span class="line">		list.add(p2);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//将list转换成json</span></span><br><span class="line">		String json = JSONObject.toJSONString(list);</span><br><span class="line">		System.out.println(json);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.annotation.JSONField;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Project</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@JSONField(name = &quot;编号&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="meta">@JSONField(name = &quot;产品名称&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="meta">@JSONField(name = &quot;库存&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">	<span class="meta">@JSONField(name = &quot;价格&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@JSONField(name = &quot;生产日期&quot;,format = &quot;yyyy年MM月dd日&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Date pDate;<span class="comment">//生产日期</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getpDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> pDate;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setpDate</span><span class="params">(Date pDate)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.pDate = pDate;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> count;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCount</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.count = count;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> price;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.price = price;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题：将java对象转换成json时，名称是否可以自己来指定？<br><img src="https://img-blog.csdnimg.cn/20201003094700661.png#pic_center" alt="指定名称操作"><br>问题：如果java对象中存在日期类型属性java.util.Date，是否可以用指定的格式来转换成json。<br><img src="https://img-blog.csdnimg.cn/20201003094714187.png#pic_center" alt="指定格式操作"></p>
<p>问题：如果java类中的某些属性不想生成json中？<br><img src="https://img-blog.csdnimg.cn/2020100309472713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="部分属性不生成json操作"></p>
<p><img src="https://img-blog.csdnimg.cn/20201003094747739.png#pic_center" alt="在这里插入图片描述"></p>
<p>问题：关于fastjson将java对象转换成json时的循环引用问题<br><img src="https://img-blog.csdnimg.cn/20201003094802215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="循环引用问题"><br>通过以下设置可以取消循环引用<br><img src="https://img-blog.csdnimg.cn/20201003094824443.png#pic_center" alt="取消循环引用" style="zoom:150%;" /></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>json</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP基础</title>
    <url>/2019/11/12/PHP%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>PHP的结构类似于HTML，两端由<code>&lt;?php  ?&gt;</code>包裹起来。代码写在标签内部。<code>?&gt;</code>后便签可要可不要。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="两种注释"><a href="#两种注释" class="headerlink" title="两种注释"></a>两种注释</h2><p>PHP的两种注释与java相同</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.1单行注释</span></span><br><span class="line"><span class="comment">// 1.2多行注释</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">/* */</span></span><br></pre></td></tr></table></figure>
<h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h2><p>定义变量格式为：<code>$变量名 = 变量值;</code> 可以不赋值。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$num = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h2 id="打印内容"><a href="#打印内容" class="headerlink" title="打印内容"></a>打印内容</h2><ul>
<li>echo 打印内容;</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> $num;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>print_r(数组/字典);&emsp;&emsp;&emsp;打印数组</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">print_r($arr);</span><br></pre></td></tr></table></figure>
<p><font color="red">注意点: 后端编写的代码不能直接运行，只能放到服务器对应的文件夹下，通过服务器运行。</font><br>如何通过服务器运行: 通过ip地址找到服务器对应的文件夹，然后再找到对应的文件运行。</p>
<h2 id="定义集合"><a href="#定义集合" class="headerlink" title="定义集合"></a>定义集合</h2><ol>
<li>数组</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">print_r($arr);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> $arr[<span class="number">1</span>];</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>字典（对象）</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dict = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;jly&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="string">&quot;33&quot;</span>&#125;;</span><br><span class="line">dict[<span class="string">&quot;name&quot;</span>];</span><br><span class="line">$dict = <span class="keyword">array</span>(<span class="string">&quot;name&quot;</span>=&gt;<span class="string">&quot;jly&quot;</span>, <span class="string">&quot;age&quot;</span>=&gt;<span class="string">&quot;33&quot;</span>);</span><br><span class="line">print_r($dict);</span><br><span class="line"><span class="keyword">echo</span>  <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> $dict[<span class="string">&quot;name&quot;</span>];</span><br></pre></td></tr></table></figure>
<h2 id="分支循环语句"><a href="#分支循环语句" class="headerlink" title="分支循环语句"></a>分支循环语句</h2><p>PHP的循环分支语句与JavaScript的循环分支语句大同小异。</p>
<h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$age = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">if</span>($age &gt;= <span class="number">18</span>)&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;成年人&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;未成年人&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="三目语句"><a href="#三目语句" class="headerlink" title="三目语句"></a>三目语句</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$age = <span class="number">16</span>;</span><br><span class="line">$res = ($age &gt;= <span class="number">18</span>) ? <span class="string">&quot;成年人&quot;</span> : <span class="string">&quot;未成年人&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> $res;</span><br></pre></td></tr></table></figure>
<h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$age = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> ($age)&#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&quot;非人类&quot;</span>;</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">18</span>:</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&quot;成年人&quot;</span>;</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">default</span>:</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&quot;未成年人&quot;</span>;</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><ol>
<li>for语句</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; count($arr); $i++)&#123;</span><br><span class="line">   <span class="keyword">echo</span> $arr[$i];</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>while语句</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">$index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ($index &lt; count($arr))&#123;</span><br><span class="line">    <span class="keyword">echo</span> $arr[$index];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    $index++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h1><h2 id="接收前端的get请求"><a href="#接收前端的get请求" class="headerlink" title="接收前端的get请求"></a>接收前端的get请求</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$_GET</span><br><span class="line">print_r($_GET);</span><br><span class="line"><span class="keyword">echo</span> $_GET[<span class="string">&quot;userName&quot;</span>];</span><br><span class="line"><span class="keyword">echo</span> $_GET[<span class="string">&quot;userPwd&quot;</span>];</span><br><span class="line"><span class="number">2.2</span><span class="number">.2</span> 接收前端的post请求</span><br><span class="line">$_POST</span><br><span class="line">print_r($_POST);</span><br><span class="line"><span class="keyword">echo</span> $_POST[<span class="string">&quot;userName&quot;</span>];</span><br><span class="line"><span class="keyword">echo</span> $_POST[<span class="string">&quot;userPwd&quot;</span>];</span><br></pre></td></tr></table></figure>
<h2 id="接收文件"><a href="#接收文件" class="headerlink" title="接收文件"></a>接收文件</h2><p>注意:</p>
<ol>
<li>上传文件一般使用POST提交</li>
<li>上传文件必须设置<code>enctype=&quot;multipart/form-data&quot;</code></li>
<li>上传的文件在PHP中可以通过<code>$_FILES</code>获取</li>
<li>PHP中文件默认会上传到一个临时目录, 接收完毕之后会自动删除</li>
</ol>
<p>默认情况下服务器对上传文件的大小是有限制的，如果想修改上传文件的限制可以修改php.ini文件</p>
<blockquote>
<p>file_uploads = On&emsp;&emsp; ; &emsp;是否允许上传文件 On/Off 默认是On<br>upload_max_filesize =2048M &emsp; ; &emsp;上传文件的最大限制<br>post_max_size = 2048M  &emsp; ;&emsp;&emsp;通过Post提交的最多数据<br>max_execution_time = 30000&emsp; ; &emsp;&emsp;脚本最长的执行时间 单位为秒<br>max_input_time =30000 &emsp;; &emsp;&emsp;接收提交的数据的时间限制 单位为秒<br>memory_limit = 2048M &emsp;;&emsp;&emsp;最大的内存消耗</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.获取上传文件对应的字典</span></span><br><span class="line">$fileInfo = $_FILES[<span class="string">&quot;upFile&quot;</span>];</span><br><span class="line"><span class="comment">//print_r($fileInfo);</span></span><br><span class="line"><span class="comment">// 2.获取上传文件的名称</span></span><br><span class="line">$fileName = $fileInfo[<span class="string">&quot;name&quot;</span>];</span><br><span class="line"><span class="comment">// 3.获取上传文件保存的临时路径</span></span><br><span class="line">$filePath = $fileInfo[<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line"><span class="comment">// 4.移动文件</span></span><br><span class="line">move_uploaded_file($filePath, <span class="string">&quot;./source/&quot;</span>.$fileName);</span><br></pre></td></tr></table></figure>
<h2 id="PHP中引入文件"><a href="#PHP中引入文件" class="headerlink" title="PHP中引入文件"></a>PHP中引入文件</h2><p>php中获取文件内容，使用        </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="string">&quot;文件路径&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>执行结果中有中文, 必须在php文件顶部设置，如引入HTML文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">header(<span class="string">&quot;content-type:text/html; charset=utf-8&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>如果PHP中需要返回XML数据, 也必须在PHP文件顶部设置</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">header(<span class="string">&quot;content-type:text/xml; charset=utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="string">&quot;info.xml&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="string">&quot;12-ajax-json.txt&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PHP</category>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>【笔记】Bootstrap简单运用</title>
    <url>/2019/08/06/%E3%80%90%E7%AC%94%E8%AE%B0%E3%80%91Bootstrap%E7%AE%80%E5%8D%95%E8%BF%90%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Bootstrap介绍"><a href="#Bootstrap介绍" class="headerlink" title="Bootstrap介绍"></a>Bootstrap介绍</h1><p>Bootstrap，基于HTML、CSS、 JAVASCRIPT的前端框架。<br>该框架已经预定义了一套CSS样式和与样式对应的JS代码。（对应的样式有对应的特效）</p>
<p>开发人员只需要编写HTML结构，添加 bootstrap固定的 class样式，就可以轻松完成指定效果的实现。</p>
<p>作用:<br>&emsp;&emsp;①Bootstrap使得Web开发更加快捷，高效<br>&emsp;&emsp;②BootStrap支持响应式开发，解决了移动互联网前端开发问题</p>
<blockquote>
<p>课外了解知识: 该框架 Twitter公司的设计师 Mark Otto和 Jacob Thornton合作开发。<br>Bootstrap基础入门使用的都是自带CSS样式，高级开发中需要使用HTML5、CS53、动态CSS语言Less进行自定义开发，JavaEE课程中学习是“基础入门”。<br>中文官网：http: //<a href="http://www.bootcss.com/">www.bootcss.com/</a></p>
</blockquote>
<h1 id="什么是响应式布局-响应式布局解决的问题"><a href="#什么是响应式布局-响应式布局解决的问题" class="headerlink" title="什么是响应式布局?响应式布局解决的问题?"></a>什么是响应式布局?响应式布局解决的问题?</h1><ul>
<li>响应式布局：一个网站的展示能够兼容多个终端（手机、iPad、PC等），而不需要为每个终端单独做一个展示版本。</li>
<li>此概念专为解决移动互联网浏览而诞生的。</li>
</ul>
<p>&emsp;&emsp;响应式布局，使得网站仅适用一套样式，就可以在不同分辨率下展示出不同的舒适效果,大大降低了网站开发维护成本，并且能带给用户更好的体验性</p>
<h1 id="Bootstrap环境搭建"><a href="#Bootstrap环境搭建" class="headerlink" title="Bootstrap环境搭建"></a>Bootstrap环境搭建</h1><h2 id="下载资源"><a href="#下载资源" class="headerlink" title="下载资源"></a>下载资源</h2><ul>
<li>中文官网地址：<a href="http://d.bootcss.com/bootstrap-3.3.5.zip">http://d.bootcss.com/bootstrap-3.3.5.zip</a><br><img src="https://img-blog.csdnimg.cn/20201001010216531.png#pic_center" alt="Bootstrap下载"><br>同时要下载：jquery-1.11.3-min.js  的插件包。</li>
</ul>
<p>注：完整版用于源码学习,但因为文件大小问题,不适合网络间传递（带min的为压缩版）<br>&emsp;&emsp;压缩版用于网络发布,压缩版和完整版的唯一区别仅为压缩版将代码间的大量空格和回车换行删除掉了，节约了大量的空间，功能上完全相同,适用于网络间快速传递。但因为没有了空格和换行，源代码难以阅读。</p>
<p><strong>视口的常见设置（了解）：</strong></p>
<table>
<thead>
<tr>
<th align="center">视口</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">width=device-width</td>
<td align="center">视口的宽度，大多手机浏览器视口的宽度是980。<br/>device-width表示采用设备的宽度。<br/>例如:手机是5.5寸，那么视口也采用5.5寸宽度</td>
</tr>
<tr>
<td align="center">initial-scale-1</td>
<td align="center">移动设备上，打开页面时的初始化缩放级别。取值：1-5。<br/>1表示100%，5表示500%</td>
</tr>
<tr>
<td align="center">minimum-scale=2</td>
<td align="center">移动设备上，页面可以最小缩放的级别。</td>
</tr>
<tr>
<td align="center">maximum-scale=1</td>
<td align="center">移动设备上，页面可以最大缩放的级别。</td>
</tr>
<tr>
<td align="center">user-scalable=no</td>
<td align="center">移动设备上,页面禁止缩放。<br/>如果设置“user–scalable=no”，则“minimum-scale-”和“maximum-scale”无效</td>
</tr>
</tbody></table>
<img src="https://img-blog.csdnimg.cn/20201001010850438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="视口" style="zoom:150%;" />

<h1 id="布局容器"><a href="#布局容器" class="headerlink" title="布局容器"></a>布局容器</h1><p>BootStrap必须需要至少一个布局容器，才能为页面内容进行封装和方便的样式控制。相当于一个画板。</p>
<p>帮助手册位置：全局CSS样式—》概览—》布局容器</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">.container</td>
<td align="center">类用于固定宽度并支持响应式布局的容器。<br/>【特点：居中，两端留白】<br/><code>&lt;div class=&quot;container&quot;&gt; ... &lt;/div&gt;</code></td>
</tr>
<tr>
<td align="center">.container-fluid</td>
<td align="center">类用于100%宽度，占据全部视口(viewport)的容器。<br/><code>&lt;div class &quot;container-fluid&quot;&gt; … &lt;/div&gt;</code></td>
</tr>
</tbody></table>
<h1 id="简述栅格系统"><a href="#简述栅格系统" class="headerlink" title="简述栅格系统"></a>简述栅格系统</h1><p>为了方便在布局容器中进行网页的布局操作。<br>BootStrap提供了一套专门用于响应式开发布局的栅格系统。<br>栅格系统将一行分为<font color="red" size=5>12列</font>，通过设定元素占用的列数来布局元素在页面上的展示位置。<br>帮助手册位置：全局CSS样式—》栅格系统<br> <img src="https://img-blog.csdnimg.cn/20201001011415718.png#pic_center" alt="栅格系统" style="zoom:150%;" /><br>作用：<br>&emsp;&emsp;可以让开发人员更加轻松进行网页布局，并且轻松进行响应式开发。</p>
<h1 id="栅格系统的特点及入门案例"><a href="#栅格系统的特点及入门案例" class="headerlink" title="栅格系统的特点及入门案例"></a>栅格系统的特点及入门案例</h1><ul>
<li>栅格特点</li>
</ul>
<ol>
<li>“行(row)“必须包含在<code>.container</code>（固定宽度）或<code>.container-fluid</code>（100%宽度）中</li>
<li>行使用的样式“row”，列使用样式“<code>col-*-*</code>”元素内容应当放置于“列(column)”内</li>
<li>基本的书写方式必须是：容器—行—列</li>
</ol>
<ul>
<li>栅格参数：“<code>col-屏幕尺寸-占用列数</code>”<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;col-lg-6</li>
</ul>
<p>&emsp;&emsp;列元素的书写顺序，决定布局顺序，先写的列元素会被先布局到行上。<br>&emsp;&emsp;列元素的占用列数，定义列元素的大小<br>&emsp;&emsp;如果第一列的所有列数加起来超过12列，则最后的列元素会被分配到下一行。</p>
<p>为了方便显示元素大小,我们为展示元素都赋了相同样式：</p>
<blockquote>
<p>border: 1px solid red; height: 100px</p>
</blockquote>
<h1 id="设置屏幕尺寸时的注意事项"><a href="#设置屏幕尺寸时的注意事项" class="headerlink" title="设置屏幕尺寸时的注意事项"></a>设置屏幕尺寸时的注意事项</h1> <img src="https://img-blog.csdnimg.cn/20201001011841823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="设置屏幕尺寸" style="zoom:150%;" />
屏幕尺寸简述：

<ul>
<li>large:lg        ——大屏幕，一般PC尺寸</li>
<li>medium:md    ——中等屏幕，小PC尺寸</li>
<li>small:sm:sm    ——小屏幕，iPad尺寸</li>
<li>x small:xs        ——超小屏幕，智能手机尺寸</li>
</ul>
<p>若设置了某个屏幕尺寸的样式，那么比该尺寸大的屏幕，会沿用该设置：比该尺寸小的屏幕，会默认一个元素占12列的设置。</p>
<p>例如：    设置了col-md-4，那么相当于也设置了cog-4。<br>&emsp;&emsp;&emsp; 其他屏幕尺寸均默认为col-sm-12，col-xs-12.</p>
<h1 id="列偏移"><a href="#列偏移" class="headerlink" title="列偏移"></a>列偏移</h1><p>通常情况下我们需要将元素居中显示，需要左边空出一定的空白区域，这里我们就可以使用列偏移来达到效果。</p>
<table>
<thead>
<tr>
<th align="center">列偏移</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>.col-屏幕大小-offset-*</code></td>
<td align="center">在指定屏幕尺寸下,向右偏移<code>*</code>个列</td>
</tr>
</tbody></table>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>BootStrap同样提供了实用的列表样式供开发人员使用。<br>帮助手册位置：全局CSS样式—》排版—》列表</p>
<table>
<thead>
<tr>
<th align="center">列表样式</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">list-inline</td>
<td align="center">将列表所有元素放置于一行</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-line&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>BootStrap<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>Android<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>大数据<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h1><p>BootStrap提供了丰富的按钮样式供开发人员使用。</p>
<p>帮助手册位置：全局CSS样式—》按钮<br><strong>任何元素加上以下样式都会变成对应按钮</strong><br> <img src="https://img-blog.csdnimg.cn/2020100101250559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="按钮样式" style="zoom:150%;" /><br><img src="https://img-blog.csdnimg.cn/20201001012523602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="按钮样式代码" style="zoom:150%;" /></p>
<h1 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h1><p>BootStrap已经提供了完整的轮播图实例，通常情况下，我们仅需进行简单修改即可使用。</p>
<p>帮助手册位置：JavaScript插件—》Carousel<br>轮播图DIV的定时换图属性：<br><code>data -interval=”毫秒值”</code><br>注意:多个轮播图必须修改轮播图的ID<br> <img src="https://img-blog.csdnimg.cn/20201001012618800.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="轮播图" style="zoom:150%;" /></p>
<h1 id="排版对齐方式"><a href="#排版对齐方式" class="headerlink" title="排版对齐方式"></a>排版对齐方式</h1><p>BootStrap提供统一的排版方式设置，方便开发人员对内容板式进行调整<br>帮助手册位置：全局CSS样式—》排版—》对齐</p>
<table>
<thead>
<tr>
<th align="center">对齐方式</th>
<th align="center">效果</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><font color="red">.text-left</font></td>
<td align="center">使元素内容靠左显示</td>
</tr>
<tr>
<td align="center"><font color="red">.text-center</font></td>
<td align="center">使元素内容居中显示</td>
</tr>
<tr>
<td align="center"><font color="red">.text-right</font></td>
<td align="center">使元素内容靠右显示</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/bc.jpg&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h1><p>帮助手册位置：全局CSS样式—》表单</p>
<p>示例：基本实例<br> <img src="https://img-blog.csdnimg.cn/20201001012944457.png#pic_center" alt="基本实例" style="zoom:150%;" /></p>
<h1 id="分页条"><a href="#分页条" class="headerlink" title="分页条"></a>分页条</h1><p>帮助手册位置：组件—》分页<br>直接拷贝代码即可使用。</p>
<p>示例效果：<br><img src="https://img-blog.csdnimg.cn/20201001013009521.png#pic_center" alt="分页条效果" style="zoom:150%;" /></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Bootstrap</tag>
        <tag>前端</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>【笔记】JDBC和连接池</title>
    <url>/2019/09/01/%E3%80%90%E7%AC%94%E8%AE%B0%E3%80%91JDBC%E5%92%8C%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="JDBC工具类的抽取"><a href="#JDBC工具类的抽取" class="headerlink" title="JDBC工具类的抽取"></a>JDBC工具类的抽取</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC的工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kidnapper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String driverClassName;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String url;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String username;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String password;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">		<span class="comment">//获取属性文件的内容：</span></span><br><span class="line">		Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			properties.load(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;src/db.properties&quot;</span>));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		driverClassName=properties.getProperty(<span class="string">&quot;driverClassName&quot;</span>);</span><br><span class="line">		url=properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">		username=properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">		password=properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 注册驱动的方法</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadDriver</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Class.forName(driverClassName);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获得连接的方法</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Connection conn = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 将驱动也一并注册</span></span><br><span class="line">			loadDriver();</span><br><span class="line">			<span class="comment">// 获得连接</span></span><br><span class="line">			conn = DriverManager.getConnection(url,username,password);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> conn;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 释放资源的方法</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Statement stmt, Connection conn)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				stmt.close();</span><br><span class="line">			&#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			stmt = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				conn.close();</span><br><span class="line">			&#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			conn = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(ResultSet rs, Statement stmt, Connection conn)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				rs.close();</span><br><span class="line">			&#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			rs = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				stmt.close();</span><br><span class="line">			&#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			stmt = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				conn.close();</span><br><span class="line">			&#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			conn = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JDBC的配置信息提取到配置文件"><a href="#JDBC的配置信息提取到配置文件" class="headerlink" title="JDBC的配置信息提取到配置文件"></a>JDBC的配置信息提取到配置文件</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul>
<li>属性文件<ul>
<li>格式：拓展名是.properties</li>
<li>内容：key=value（键值对）</li>
</ul>
</li>
<li>XML文件</li>
</ul>
<h3 id="提取信息到配置文件"><a href="#提取信息到配置文件" class="headerlink" title="提取信息到配置文件"></a>提取信息到配置文件</h3><ul>
<li><p>定义一个配置文件</p>
<img src="https://img-blog.csdnimg.cn/20201002224834538.png#pic_center" alt="配置文件" style="zoom:150%;" />

<ul>
<li>driverClassName：驱动名，5.8.0版本的为：com.mysql.jdbc.Driver</li>
</ul>
</li>
</ul>
<p>8.0.12版本的为：com.mysql.cj.jdbc.Driver<br>    - url：驱动链接：以图中为例，格式为：jdbc:mysql://本机名:端口号/数据库名?是否采用SSL链接（一般为false）&amp;Unicode编码&amp;编码格式为UTF-8&amp;时区设置（不加会出错）<br>    - username：mysql用户名<br>    - password：数据库连接密码</p>
<pre><code>![JDBC出现乱码问题](https://img-blog.csdnimg.cn/20201002224931796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_center)</code></pre>
<h3 id="在工具类中解析属性文件"><a href="#在工具类中解析属性文件" class="headerlink" title="在工具类中解析属性文件"></a>在工具类中解析属性文件</h3><p>获取到具体内容为常量赋值<br> <img src="https://img-blog.csdnimg.cn/2020100222511734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="解析属性文件" style="zoom:150%;" /><br>注：红框为配置文件路径</p>
<h1 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h1><h2 id="连接池的概述"><a href="#连接池的概述" class="headerlink" title="连接池的概述"></a>连接池的概述</h2><h3 id="什么是连接池"><a href="#什么是连接池" class="headerlink" title="什么是连接池"></a>什么是连接池</h3><p>连接池是创建和管理一个连接的缓冲池的技术，这些连接准备好被任何需要它们的进程使用。</p>
<p>连接池是装有连接的容器，使用连接的话，可从连接中进行获取，使用完成之后将连接归还给连接池。</p>
<h3 id="为什么要学习连接池"><a href="#为什么要学习连接池" class="headerlink" title="为什么要学习连接池"></a>为什么要学习连接池</h3><p>连接对象创建和是需要耗费时间的，在服务器初始化的时候就初始化一些连接。把这些连接放入到内存中，使用的时候可以从内存中获取，使用完成之后将连接放入连接池中。从内存中获取和归还的效率要远远高于创建和销毁的效率。（提升性能）</p>
<h3 id="连接池原理"><a href="#连接池原理" class="headerlink" title="连接池原理"></a>连接池原理</h3><p> <img src="https://img-blog.csdnimg.cn/20201002225432694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="连接池原理"></p>
<h2 id="自定义连接池"><a href="#自定义连接池" class="headerlink" title="自定义连接池"></a>自定义连接池</h2><h3 id="自定义连接池的实现"><a href="#自定义连接池的实现" class="headerlink" title="自定义连接池的实现"></a>自定义连接池的实现</h3><ol>
<li>编写一个类实现DataSource接口</li>
<li>重写getConnection方法</li>
<li>初始化多个连接在内存中</li>
<li>编写归还连接的方法</li>
</ol>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jdbc.connectpool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLFeatureNotSupportedException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jdbc.utils.JDBCUtils;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义连接池</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kidnapper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDataSourse</span> <span class="keyword">implements</span> <span class="title">DataSource</span> </span>&#123;</span><br><span class="line">	<span class="comment">//将一些连接存入到内存中，可以定义一个集合，用户存储连接对象</span></span><br><span class="line">	<span class="keyword">private</span> List&lt;Connection&gt; connList = <span class="keyword">new</span> ArrayList&lt;Connection&gt;();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//在初始化的时候提供一些连接</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyDataSourse</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//初始化连接</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">			<span class="comment">//向集合中存入连接</span></span><br><span class="line">			connList.add(JDBCUtils.getConnection());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//从连接池中获得连接的方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">		Connection conn = connList.remove(<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">return</span> conn;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//编写一个归还连接的方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBack</span><span class="params">(Connection conn)</span></span>&#123;</span><br><span class="line">		connList.add(conn);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> PrintWriter <span class="title">getLogWriter</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLogWriter</span><span class="params">(PrintWriter out)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoginTimeout</span><span class="params">(<span class="keyword">int</span> seconds)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLoginTimeout</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Logger <span class="title">getParentLogger</span><span class="params">()</span> <span class="keyword">throws</span> SQLFeatureNotSupportedException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">unwrap</span><span class="params">(Class&lt;T&gt; iface)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isWrapperFor</span><span class="params">(Class&lt;?&gt; iface)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">(String username, String password)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jdbc.connectpool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jdbc.utils.JDBCUtils;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义连接池的测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kidnapper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourseDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 此时自定义连接池</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Connection conn = <span class="keyword">null</span>;</span><br><span class="line">		PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line">		ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">		MyDataSource dataSource = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			<span class="comment">//获得连接</span></span><br><span class="line">			<span class="comment">//conn = JDBCUtils.getConnection();</span></span><br><span class="line">			<span class="comment">//从连接池中获得连接</span></span><br><span class="line">			dataSource = <span class="keyword">new</span> MyDataSource();</span><br><span class="line">			conn = dataSource.getConnection();</span><br><span class="line">			<span class="comment">//编写SQL</span></span><br><span class="line">			String sql = <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">			<span class="comment">//预编译SQL</span></span><br><span class="line">			pstmt = conn.prepareStatement(sql);</span><br><span class="line">			<span class="comment">//设置参数</span></span><br><span class="line">			<span class="comment">//执行SQL</span></span><br><span class="line">			rs = pstmt.executeQuery();</span><br><span class="line">			<span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">				System.out.println(rs.getInt(<span class="string">&quot;id&quot;</span>)+rs.getString(<span class="string">&quot;username&quot;</span>)+<span class="string">&quot; &quot;</span>+rs.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			<span class="comment">//JDBCUtils.release(rs,pstmt, conn);</span></span><br><span class="line">			<span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">				<span class="keyword">try</span>&#123;</span><br><span class="line">					rs.close();</span><br><span class="line">				&#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(pstmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">				<span class="keyword">try</span>&#123;</span><br><span class="line">					pstmt.close();</span><br><span class="line">				&#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//归还连接</span></span><br><span class="line">			dataSource.addBack(conn);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义连接池的问题"><a href="#自定义连接池的问题" class="headerlink" title="自定义连接池的问题"></a>自定义连接池的问题</h3><h4 id="使用接口的实现类完成的构造"><a href="#使用接口的实现类完成的构造" class="headerlink" title="使用接口的实现类完成的构造"></a>使用接口的实现类完成的构造</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MyDatasource dataSource = <span class="keyword">new</span> MyDatasource();</span><br></pre></td></tr></table></figure>
<p>这种写法不方便程序的扩展。</p>
<h4 id="额外提供了方法归还连接"><a href="#额外提供了方法归还连接" class="headerlink" title="额外提供了方法归还连接"></a>额外提供了方法归还连接</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//归还连接：</span></span><br><span class="line">daraSource.addBack(conn);</span><br></pre></td></tr></table></figure>
<p>这种方式增加使用连接池的用户的难度。</p>
<h3 id="自定义连接池的问题解决"><a href="#自定义连接池的问题解决" class="headerlink" title="自定义连接池的问题解决"></a>自定义连接池的问题解决</h3><p>如果不提供自定义的方法就可以解决这个问题,但是连接要如何归还到连接池呢？</p>
<h4 id="解决分析的思路"><a href="#解决分析的思路" class="headerlink" title="解决分析的思路"></a>解决分析的思路</h4><p>原来在 Connection中是有一个close方法的，close方法完成了连接的销毁。能不能做一个事情，将原有的连接的 close方法改为归还。</p>
<ul>
<li>现在要做的事情就是将原有的close方法的逻辑改为归还。<font color="red">（增强一个类中的方法）</font></li>
</ul>
<p><strong><font color="red">如何增强一个类中的方法</font></strong></p>
<ul>
<li><font color="red">一种：采用维承的方式：</font></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">*****维承这种增强是最简单，但是是有使用条件的：必须能够控制这个类的构造！！！</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Man</span></span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">			System.out.ptintln(“跑….”);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span> <span class="keyword">extends</span> <span class="title">Man</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(“飞….”);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><font color="red">二种:采用装饰者模式：</font ></li>
</ul>
<blockquote>
<p><font color="red">*****装饰者模式使用条件：<br>*一、增强的类和被增强的类实现相同的接口<br>*二、在增强的类中获得被增强的类的引用</font ></p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201002230428992.png#pic_center" alt="装饰器模式"></p>
<p><strong>使用装饰者模式增强Connection中的close方法：</strong><br>为了简化编程，提供一个模板类（模板类原封不动的将接口中的所有方法都实现，但是都没有增强，即所有方法又重新调用了一遍）。编写一个装饰类模板类。在装饰类中只需要增强某个方法即可。</p>
<h4 id="代码修改"><a href="#代码修改" class="headerlink" title="代码修改"></a>代码修改</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用装饰者增强Connection中的close方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kidnapper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConnectionWrapper</span> <span class="keyword">extends</span> <span class="title">ConnectionWrapper</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Connection conn;</span><br><span class="line">	<span class="keyword">private</span> List&lt;Connection&gt; connList;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyConnectionWrapper</span><span class="params">(Connection conn, List&lt;Connection&gt; connList)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(conn);</span><br><span class="line">		<span class="keyword">this</span>.conn = conn;</span><br><span class="line">		<span class="keyword">this</span>.connList = connList;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//增强某个方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">		<span class="comment">//super.close();</span></span><br><span class="line">		<span class="comment">//归还连接</span></span><br><span class="line">		connList.add(conn);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 对另外两个文件的修改如下：<br> <img src="https://img-blog.csdnimg.cn/20201002230525157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="对文件的修改1"><br><img src="https://img-blog.csdnimg.cn/20201002230540234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="对文件的修改2"></p>
<h2 id="开源连接池的介绍和使用"><a href="#开源连接池的介绍和使用" class="headerlink" title="开源连接池的介绍和使用"></a>开源连接池的介绍和使用</h2><h3 id="Druid的概述"><a href="#Druid的概述" class="headerlink" title="Druid的概述"></a>Druid的概述</h3><p>Druid是阿里旗下开源连接池产品，使用非常简单，可以与Spring框架进行快速整合。配置文件使用属性文件（.properties）。</p>
<h3 id="C3P0的连接池概述"><a href="#C3P0的连接池概述" class="headerlink" title="C3P0的连接池概述"></a>C3P0的连接池概述</h3><p>C3P0是一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。目前使用它的开源项目有Hibernate、Spring等。配置文件可用属性文件（.properties），也可使用XML文件，一般用XML文件。</p>
<h2 id="JDBCUtils的优化改写"><a href="#JDBCUtils的优化改写" class="headerlink" title="JDBCUtils的优化改写"></a>JDBCUtils的优化改写</h2><p>将数据库连接的工具类改写为以数据库连接池的形式，这里以C3P0为例，也可使用Druid。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC的工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kidnapper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils2</span> </span>&#123;</span><br><span class="line">	<span class="comment">//创建一个连接池：但是这个连接池只需要创建一次即可。</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获得连接的方法</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> SQLException </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获得连接池</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> dataSource;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 释放资源的方法</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Statement stmt, Connection conn)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				stmt.close();</span><br><span class="line">			&#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			stmt = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				conn.close();</span><br><span class="line">			&#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			conn = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(ResultSet rs, Statement stmt, Connection conn)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				rs.close();</span><br><span class="line">			&#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			rs = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				stmt.close();</span><br><span class="line">			&#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			stmt = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				conn.close();</span><br><span class="line">			&#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			conn = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> com.jdbc.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> com.jdbc.utils.JDBCUtils2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C3P0Demo2</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 使用新的工具类测试</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Connection conn = <span class="keyword">null</span>;</span><br><span class="line">		PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line">		ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//获得连接：从连接池中获取</span></span><br><span class="line">			<span class="comment">//从连接池中获得连接</span></span><br><span class="line">			conn = JDBCUtils2.getConnection();</span><br><span class="line">			<span class="comment">//编写SQL</span></span><br><span class="line">			String sql = <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">			<span class="comment">//预编译SQL</span></span><br><span class="line">			pstmt = conn.prepareStatement(sql);</span><br><span class="line">			<span class="comment">//执行SQL</span></span><br><span class="line">			rs = pstmt.executeQuery();</span><br><span class="line">			<span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">				System.out.println(rs.getInt(<span class="string">&quot;id&quot;</span>)+<span class="string">&quot; &quot;</span>+rs.getString(<span class="string">&quot;username&quot;</span>)+<span class="string">&quot; &quot;</span>+rs.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			JDBCUtils.release(rs, pstmt, conn);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中C3P0的配置文件如下：<br> <img src="https://img-blog.csdnimg.cn/20201002230716275.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="C3P0的配置文件内容"></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>JDBC</tag>
        <tag>连接池</tag>
        <tag>数据库</tag>
        <tag>后端</tag>
        <tag>装饰器模式</tag>
      </tags>
  </entry>
  <entry>
    <title>【笔记】Servlet域对象的总结和多文件上传</title>
    <url>/2019/09/01/%E3%80%90%E7%AC%94%E8%AE%B0%E3%80%91Servlet%E5%9F%9F%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%80%BB%E7%BB%93%E5%92%8C%E5%A4%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Servlet的域对象的总结"><a href="#Servlet的域对象的总结" class="headerlink" title="Servlet的域对象的总结"></a>Servlet的域对象的总结</h1><h2 id="请求范围（ServletRequest）"><a href="#请求范围（ServletRequest）" class="headerlink" title="请求范围（ServletRequest）"></a>请求范围（ServletRequest）</h2><ul>
<li><p>何时创建和销毁的</p>
<ul>
<li>创建：当用户向服务器发送一次请求，服器创建一个 request对象</li>
<li>销毁：当服务器对这次请求作出了响应，服务器就会销毁这个 request对象</li>
</ul>
</li>
<li><p>如何存取数据</p>
<ul>
<li>存数据：<br>  <code>void setAttribute(String name, Object value); </code></li>
<li>取数据<br>  <code>Object getAttribute(String name);</code></li>
</ul>
</li>
<li><p>作用范围</p>
<ul>
<li>作用范围：一次请求。（转发就是一次请求）</li>
</ul>
</li>
</ul>
<h2 id="会话范围（HttpSession）"><a href="#会话范围（HttpSession）" class="headerlink" title="会话范围（HttpSession）"></a>会话范围（HttpSession）</h2><ul>
<li>何时创建和销毁的<ul>
<li>创建：服务器端第一次调用 getSession方法的时候。</li>
<li>销毁：三种情况<ol>
<li>Session过期，默认的过期时间30分钟（可在Tomcat的配置文件中修改）</li>
<li>非正常关闭服务器（正常关闭服务器—session会被序列化）</li>
<li>手动调用 session. invalidate();</li>
</ol>
</li>
</ul>
</li>
<li>如何存取数据<ul>
<li>存数据：<br>  <code>vold setAttribute(String name Oblect value);</code></li>
<li>取数据:<br>  <code>Object getAttribute(String name);</code></li>
</ul>
</li>
<li>作用范围<ul>
<li>作用范围：一次会话（多次请求）</li>
</ul>
</li>
</ul>
<h2 id="应用范围（ServletContext）"><a href="#应用范围（ServletContext）" class="headerlink" title="应用范围（ServletContext）"></a>应用范围（ServletContext）</h2><ul>
<li>何时创建和销毁的<ul>
<li>创建：服务启动的时候创建，为每个web项目创建一个单独的ServletContext对象。</li>
<li>销毁：服务器关闭的时候，或者项目从服务器中移除的时候。</li>
</ul>
</li>
<li>如何存取数据<ul>
<li>存数据：<br>  <code>void setAttribute(String name, Object value);</code></li>
<li>取数据<br>  <code>Object getAttribute(String name);</code></li>
</ul>
</li>
<li>作用范围<ul>
<li>作用范围：整个应用</li>
</ul>
</li>
</ul>
<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="文件上传原理"><a href="#文件上传原理" class="headerlink" title="文件上传原理"></a>文件上传原理</h2> <img src="https://img-blog.csdnimg.cn/20201002235523291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="文件上传原理" style="zoom:150%;" />

<h2 id="JS控制多文件上传"><a href="#JS控制多文件上传" class="headerlink" title="JS控制多文件上传"></a>JS控制多文件上传</h2><img src="https://img-blog.csdnimg.cn/20201002235536225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="JS控制多文件上传" style="zoom:150%;" />]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>Servlet</tag>
        <tag>多文件</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>【笔记】简单的SQL注入理解</title>
    <url>/2019/09/01/%E3%80%90%E7%AC%94%E8%AE%B0%E3%80%91%E7%AE%80%E5%8D%95%E7%9A%84SQL%E6%B3%A8%E5%85%A5%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h1><p>通过输入包含SQL语句关键字来对系统进行不法操作，例如别人在只知道你的账号而不知道你的密码的状况下，通过SQL注入漏洞可使用你的用户名登录进系统。</p>
<ul>
<li>输入用户名（以下“aaa”为用户名）<ul>
<li>aaa’ or ‘1=1 密码随意</li>
<li>aaa’ – 密码随意</li>
</ul>
</li>
</ul>
<h1 id="SQL注入漏洞分析"><a href="#SQL注入漏洞分析" class="headerlink" title="SQL注入漏洞分析"></a>SQL注入漏洞分析</h1> <img src="https://img-blog.csdnimg.cn/20201002223643461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_32,color_FFFFFF,t_70#pic_center" alt="SQL注入漏洞分析" style="zoom:150%;" />

<h1 id="SQL注入漏洞解决"><a href="#SQL注入漏洞解决" class="headerlink" title="SQL注入漏洞解决"></a>SQL注入漏洞解决</h1><p>需要采用PreparedStatement对象解决SQL注入漏洞。这个对象将SQL预先进行编译，使用？作为占位符。？所代表的内容是SQL所固定。再次传入变量（包含SQL的关键字）。这个时候也不会识别这些关键字。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>会话技术(Cookie,Session)</title>
    <url>/2019/09/01/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF(Cookie,Session)/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="什么是会话"><a href="#什么是会话" class="headerlink" title="什么是会话"></a>什么是会话</h1><p>会话简单理解为：用户打开一个浏览器，点击多个超连接访问服务器的web资源，然后关闭浏览器，整个过程称为是一次会话。</p>
<h1 id="为什么要学习会话"><a href="#为什么要学习会话" class="headerlink" title="为什么要学习会话"></a>为什么要学习会话</h1><p>每个用户与服务器进行交互过程中，产生一些各自的数据，程序想要把这些数据进行保存，就需要使用会话技术。<br>例如：用户点击超链接购买一个商品，程序应该保存用户所购买的商品，以便于用户点击结账可以得到用户所购买的商品信息。<br>思考：用户购买的商品保存在 request或ServletContext中是否可以?<br> <img src="https://img-blog.csdnimg.cn/20201003091731565.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="存在的问题" style="zoom:150%;" /></p>
<h1 id="会话技术分类"><a href="#会话技术分类" class="headerlink" title="会话技术分类"></a>会话技术分类</h1><h2 id="Cookie技术"><a href="#Cookie技术" class="headerlink" title="Cookie技术"></a>Cookie技术</h2><p>Cookie是客户端技术，程序把每个用户的数据以cookie的形式保存到各自浏览器中。当用户使用览器再次访问服务器中的web资源的时候，就会带着各自的数据过去。这样，web资源处理的就是用户各自的数据了。<br><img src="https://img-blog.csdnimg.cn/20201003091807892.png#pic_center" alt="Cookie技术" style="zoom:150%;" /></p>
<h2 id="Session技术"><a href="#Session技术" class="headerlink" title="Session技术"></a>Session技术</h2><p>Session是服务器端技术，利用这个技术，服务器在运行时为每一个用户的浏览器创建一个独享的 session对象。由于 session为用户浏览器独享，所有用户在访问服务器的时候，可以把自的数据放在各自的 session中，当用户再次访问服务器中的web资源的时候，其他web资源再从用户各自的 session中取出数据为用户服务。<br> <img src="https://img-blog.csdnimg.cn/20201003091825927.png#pic_center" alt="Session技术" style="zoom:150%;" /></p>
<h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h2 id="Cookie应用案例"><a href="#Cookie应用案例" class="headerlink" title="Cookie应用案例"></a>Cookie应用案例</h2><h3 id="记录用户上次访问时间分析"><a href="#记录用户上次访问时间分析" class="headerlink" title="记录用户上次访问时间分析"></a>记录用户上次访问时间分析</h3><img src="https://img-blog.csdnimg.cn/20201003091848735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="记录用户上次访问时间分析" style="zoom:150%;" />

<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找指定名称Cookie的工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kidnapper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Cookie <span class="title">findCookie</span><span class="params">(Cookie[] cookies,String name)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(cookies == <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="comment">//浏览器没有携带任何的Cookie</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">				<span class="comment">// 判断数组中的每个cookie的名称与给定名称是否一致</span></span><br><span class="line">				<span class="keyword">if</span>(name.equals(cookie.getName()))&#123;</span><br><span class="line">					<span class="comment">// 直接返回</span></span><br><span class="line">					<span class="keyword">return</span> cookie;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//浏览器带有Cookie过来了，但是没有指定名称的那个Cookie</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> com.jly.utils.CookieUtils;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 记录用户上次访问时间的Servlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VisitServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 用户访问Servlet</span></span><br><span class="line"><span class="comment">		 * * 如果是第一次访问</span></span><br><span class="line"><span class="comment">		 * 	 * 显示 您好，欢迎来到本网站</span></span><br><span class="line"><span class="comment">		 * 	 * 记录当前访问时间，存入到Cookie，回写到浏览器</span></span><br><span class="line"><span class="comment">		 * * 如果不是第一次访问</span></span><br><span class="line"><span class="comment">		 * 	 * 从cookie中获得上次时间，显示到页面</span></span><br><span class="line"><span class="comment">		 * 	 * 记录当前访问时间，存入到Cookie，回写到浏览器</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="comment">//判断是否是第一次访问：从指定的Cookie的数组中获取指定名称的Cookie</span></span><br><span class="line">		<span class="comment">//获得从浏览器带过来的所有Cookie</span></span><br><span class="line">		Cookie[] cookies = request.getCookies();</span><br><span class="line">		<span class="comment">//从数组中找到指定名称的Cookie</span></span><br><span class="line">		Cookie cookie = CookieUtils.findCookie(cookies, <span class="string">&quot;lastVisit&quot;</span>);</span><br><span class="line">		<span class="comment">//判断是否是第一次访问</span></span><br><span class="line">		<span class="keyword">if</span>(cookie == <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="comment">//是第一次访问</span></span><br><span class="line">			<span class="comment">//显示到页面上一段内容</span></span><br><span class="line">			response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">			response.getWriter().println(<span class="string">&quot;&lt;h1&gt;您好，欢迎来到本网站！&lt;/h1&gt;&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">//不是第一次访问</span></span><br><span class="line">			<span class="comment">//获得cookie中的上一次访问时间，显示到页面</span></span><br><span class="line">			String value = cookie.getValue();</span><br><span class="line">			<span class="comment">//显示到页面上一段内容</span></span><br><span class="line">			response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">			response.getWriter().println(<span class="string">&quot;&lt;h1&gt;您好，您的上次访问时间为：&quot;</span>+value+<span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//记录当前的系统时间存入到Cookie，回写到浏览器</span></span><br><span class="line">		Date d = <span class="keyword">new</span> Date();</span><br><span class="line">		<span class="comment">//将日期转化格式</span></span><br><span class="line">		SimpleDateFormat formatter = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd-HH:mm:ss&quot;</span>);</span><br><span class="line">		<span class="comment">//存入到Cookie</span></span><br><span class="line">		Cookie c = <span class="keyword">new</span> Cookie(<span class="string">&quot;lastVisit&quot;</span>, formatter.format(d));</span><br><span class="line">		<span class="comment">//给Cookie设置有效路径</span></span><br><span class="line">		c.setPath(<span class="string">&quot;/Cookie&quot;</span>);</span><br><span class="line">		<span class="comment">//给Cookie设置有效时长</span></span><br><span class="line">		c.setMaxAge(<span class="number">60</span>*<span class="number">60</span>);<span class="comment">//设置有效时长为1小时</span></span><br><span class="line">		<span class="comment">//回写到浏览器</span></span><br><span class="line">		response.addCookie(c);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		doGet(request, response);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color="red">注意：cookie的value中不能含有空格、逗号、分号等特殊字符！</font><br>所以，在这个案例中必须将日期格式进行转换，否则获取的日期中有空格，系统会报500的错误</p>
<h2 id="Cookied的简单使用"><a href="#Cookied的简单使用" class="headerlink" title="Cookied的简单使用"></a>Cookied的简单使用</h2><h3 id="获得从浏览器带过来的Cookie"><a href="#获得从浏览器带过来的Cookie" class="headerlink" title="获得从浏览器带过来的Cookie"></a>获得从浏览器带过来的Cookie</h3><p>通过HttpServletRequest对象中的方法：<br> <img src="https://img-blog.csdnimg.cn/20201003092042717.png#pic_center" alt="getCookies方法" style="zoom:150%;" /></p>
<h3 id="向浏览器回写Cookie"><a href="#向浏览器回写Cookie" class="headerlink" title="向浏览器回写Cookie"></a>向浏览器回写Cookie</h3><p>通过HttpServletResponse对象中的方法：<br><img src="https://img-blog.csdnimg.cn/2020100309214398.png#pic_center" alt="addCookie方法" style="zoom:150%;" /></p>
<h3 id="Cookie的构造"><a href="#Cookie的构造" class="headerlink" title="Cookie的构造"></a>Cookie的构造</h3><img src="https://img-blog.csdnimg.cn/20201003092203905.png#pic_center" alt="Cookie构造" style="zoom:150%;" />

<h2 id="Cookie的分类"><a href="#Cookie的分类" class="headerlink" title="Cookie的分类"></a>Cookie的分类</h2><h3 id="Cookie应用案例存在问题"><a href="#Cookie应用案例存在问题" class="headerlink" title="Cookie应用案例存在问题"></a>Cookie应用案例存在问题</h3><p>用户访问 Servlet，记录用户的上次访问时间。但是如果用户将浏览器关闭，重新打开浏览器访问程序，程序就会把其当成是第一次访问(显示：您好，欢迎来到本网站)</p>
<h3 id="Cookie的分类-1"><a href="#Cookie的分类-1" class="headerlink" title="Cookie的分类"></a>Cookie的分类</h3><ol>
<li><p><strong>默认级别的 Cookie</strong><br>指的是没有设置有效时间的Cookie，默认的情况下只要关闭了浏览器，Cookie也会被销毁。（Cookie存在于浏览器的内存中，当关闭了浏览器Cookie就销毁了）。</p>
</li>
<li><p><strong>持久级别的 Cookie</strong><br>指的是有有效时间的 Cookie，这种Cookie的内容不是保存在浏器的内存中，将 Cookie的内容保存（持久化）到硬盘上。这个时候，关闭浏览器，再次打开浏览器会加载硬盘上的文件，从而Cookie中的数据就不会丢失。</p>
</li>
</ol>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><img src="https://img-blog.csdnimg.cn/20201003092331950.png#pic_center" alt="构造方法" style="zoom:150%;" />

<h3 id="其他的方法"><a href="#其他的方法" class="headerlink" title="其他的方法"></a>其他的方法</h3><ul>
<li><p>获得Cookie的名称的方法<br><img src="https://img-blog.csdnimg.cn/20201003092425937.png#pic_center" alt="getName"></p>
</li>
<li><p>获得Cookie的值的方法</p>
<img src="https://img-blog.csdnimg.cn/20201003092430575.png#pic_center" alt="getValue" style="zoom:150%;" />
</li>
<li><p>设置Cookie的有效域名</p>
<img src="https://img-blog.csdnimg.cn/20201003092505983.png#pic_center" alt="setDomain" style="zoom:150%;" />
- 设置Cookie的有效路径
<img src="https://img-blog.csdnimg.cn/20201003092524284.png#pic_center" alt="setPath" style="zoom:150%;" /></li>
<li><p>设置Cookie的有效时长</p>
<img src="https://img-blog.csdnimg.cn/20201003092539695.png#pic_center" alt="setMaxAge" style="zoom:150%;" />
## Cookie的使用细节</li>
<li><p>一个 Cookie只用标识一种信息，至少含有一个标识该信息的名称和值。</p>
</li>
<li><p>一个web站点可以给一个浏览器发送多个Cookie。一个web浏览器可以存储多个web站点的 Cookie。</p>
</li>
<li><p>浏览器一般只允许存放300个 Cookie，每个站点最多可以存放20个Cookie，每个 Cookie的大小限制为4KB（老版本浏览器）。—-<font color="red">浏览器存放的Cookie的大小和个数是有限制的。</font></p>
</li>
<li><p>如果创建了一个 Cookie，并发送到浏览器，默认情况下它是一个会话级别的Cookie。用户退出浏览器就被删除。如果希望将这个Cookie存到磁盘上，需要设置有效时长调用 setMaxAge(int maxAge)方法，以秒为单位的。</p>
</li>
<li><p>需要手动删除持久性 Cookie，可以将 Cookie有效时长设置为0。必须注意：删除 Cookie时候，path必须一致，否则无法删除。</p>
</li>
<li><p>cookie的value中不能含有空格、逗号、分号等特殊字符。</p>
</li>
</ul>
<h1 id="Session的概述"><a href="#Session的概述" class="headerlink" title="Session的概述"></a>Session的概述</h1><h2 id="什么是-Session"><a href="#什么是-Session" class="headerlink" title="什么是 Session"></a>什么是 Session</h2><p>Session称为是一次会话，Cookie将用户产生的私有的数据保存到浏览器端，Session将用户产生的私有的数据保存到服务器端。注意：一个浏览器独占一个 session对象。因此，在需要保存用户数据时候，服务器程序可以将用户数据写到 session对象中，当用户使用浏览器访问其他程序时，其他程序可以从用户的 session中取出该用户的数据，为用户服务</p>
<h2 id="为什么有-Cookie还要有-Session"><a href="#为什么有-Cookie还要有-Session" class="headerlink" title="为什么有 Cookie还要有 Session"></a>为什么有 Cookie还要有 Session</h2><ul>
<li>Cookie局限性：<ul>
<li>Cookie保存的数据是有个数和大小的限制的。</li>
<li>数据是保存客户端浏览器上（相对不是很安全）。</li>
</ul>
</li>
<li>Session<ul>
<li>Session没有个数和大小限制。</li>
<li>数据是保存在服务器上（相对比较安全）。</li>
</ul>
</li>
</ul>
<h2 id="Session如何保存用户数据"><a href="#Session如何保存用户数据" class="headerlink" title="Session如何保存用户数据"></a>Session如何保存用户数据</h2><p>Session对象由服务器创建，开发人员可以调用request对象的getSession方法得到Session对象。<br><img src="https://img-blog.csdnimg.cn/20201003093014674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="Session保存数据" style="zoom:150%;" /></p>
<h2 id="Session的实现原理"><a href="#Session的实现原理" class="headerlink" title="Session的实现原理"></a>Session的实现原理</h2><ul>
<li><font color="red">服务器是如何实现一个session为一个用户浏览器服务的？</font><img src="https://img-blog.csdnimg.cn/20201003093123323.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="Session实现原理" style="zoom:150%;" />

</li>
</ul>
<p>Session的实现原理：</p>
<ul>
<li><font color="red">基于Cookie的</font>，基于Cookie回写了一个Session的ID。<h2 id="Session作为域对象的API"><a href="#Session作为域对象的API" class="headerlink" title="Session作为域对象的API"></a>Session作为域对象的API</h2></li>
<li>向session中存入数据<img src="https://img-blog.csdnimg.cn/20201003093237294.png#pic_center" alt="setAttribute方法" style="zoom:150%;" /></li>
<li>从session域中获取数据<img src="https://img-blog.csdnimg.cn/20201003093246302.png#pic_center" alt="getAttribute方法" style="zoom:150%;" /></li>
<li>从session域中移除数据<img src="https://img-blog.csdnimg.cn/20201003093254833.png#pic_center" alt="removeAttribute方法" style="zoom:150%;" />
## Session作为域对象的作用范围
Session作为域对象，作用范围就是<font color="red">一次会话</font>的范围。一次会话，指的是用户打开浏览器点击多个超链接，访问服务器资源，到最后关闭浏览器的过程。Session多用于存储用户的个人信息等。</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Cookie</tag>
        <tag>Session</tag>
      </tags>
  </entry>
  <entry>
    <title>博客文章模板</title>
    <url>/2019/09/01/%E5%8D%9A%E5%AE%A2%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
  </entry>
  <entry>
    <title>观察者模式：秒杀启动案例（含Quartz的简单应用）</title>
    <url>/2020/07/16/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%9A%E7%A7%92%E6%9D%80%E5%90%AF%E5%8A%A8%E6%A1%88%E4%BE%8B%EF%BC%88%E5%90%ABQuartz%E7%9A%84%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>使用Quartz写一个简单的计时器，再使用观察者模式实现秒杀按钮启动的案例</p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>在某些重要的场景下，电商会开展定时秒杀活动，假设在6.18活动中携程网会对站内多种商品在同一时刻启动秒杀活动，请使用观察者模式，完成上述功能的设计类图和源码。<br><img src="https://img-blog.csdnimg.cn/20200715160551317.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_centerpic_center" alt="618携程秒杀按钮启动图" style="zoom: 33%;" /></p>
<h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>在这个案例里，我没有写出相应的界面，所有的功能都是使用类模拟相对应的模块，重点在于观察者模式的使用上。先上类图。这里我用Quartz写了一个简单的计时器，通过Cron表达式对秒杀时间进行设置。当系统到达秒杀的时间时，秒杀按钮才开启秒杀。然后封装两个ConcreteButton的具体观察者类来模拟秒杀模块的功能。<br><img src="https://img-blog.csdnimg.cn/20200715161644793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="秒杀按钮启动类图"><br>上面的类图大致分为两个部分：其中的类QuartzSeckill主要与Client搭配实现计时器的功能，下面的5个类为观察者模式的实现，具体如下：</p>
<ul>
<li><p>Seckill：目标类（Subject），作为秒杀抽象目标类，其中的notifyseckill()为抽象通知方法；</p>
</li>
<li><p>SeckillTime：具体目标类（ConcreteSubject），通过继承Seckill类，实现具体的通知方法；</p>
</li>
<li><p>SeckillButton：观察者类（Observer）：对Seckill类的改变做出反应，声明了更新数据的抽象方法response()；</p>
</li>
<li><p>ConcreteButton、ConcreteButtonall：具体观察者类（ConcreteObserver），两个类的功能相同，都是实现SeckillButton类中response()的具体方法，只是两个类的一些方法上存在差异。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>以下是观察者模式的各个类，代码中含有解释的一些地方不再过多赘述：<br><strong>Seckill.java:</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 秒杀抽象目标类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Seckill</span> </span>&#123;</span><br><span class="line">	<span class="comment">//定义一个ArrayList，用来存放秒杀按钮</span></span><br><span class="line">    <span class="keyword">protected</span> ArrayList&lt;SeckillButton&gt; buttons = <span class="keyword">new</span> ArrayList&lt;SeckillButton&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//注册方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(SeckillButton button)</span></span>&#123;</span><br><span class="line">    	buttons.add(button);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//注销方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(SeckillButton button)</span></span>&#123;</span><br><span class="line">    	buttons.remove(button);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//抽象通知方法，通知更新所有的按键</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">notifyseckill</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">12345678910111213141516171819202122</span></span><br></pre></td></tr></table></figure>

<p><strong>SeckillTime.java:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体目标类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillTime</span> <span class="keyword">extends</span> <span class="title">Seckill</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//秒杀是否开始状态标志</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> SeckillStart;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyseckill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;618携程网的秒杀活动开始！&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;------------------&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span>(SeckillButton button:buttons)&#123;</span><br><span class="line">	           button.response();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1234567891011121314151617</span></span><br></pre></td></tr></table></figure>

<p><strong>SeckillButton.java:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象观察者类（抽象按钮）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SeckillButton</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">response</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure>

<p><strong>ConcreteButton.java:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体观察者类（按钮类）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteButton</span> <span class="keyword">implements</span> <span class="title">SeckillButton</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteButton</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">	  <span class="keyword">this</span>.name =name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取按键名称</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">response</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(name+<span class="string">&quot;按钮开始秒杀！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1234567891011121314151617181920</span></span><br></pre></td></tr></table></figure>

<p><strong>ConcreteButtonall.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体观察者类（all按钮类）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteButtonall</span> <span class="keyword">implements</span> <span class="title">SeckillButton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">response</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">		System.out.println(<span class="string">&quot;全网按钮开始秒杀！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">123456789101112</span></span><br></pre></td></tr></table></figure>

<p>做到这里其实已经基本实现了观察者模式了，如果不添加计时器，只需要再写一个以下的客户端类对各个类进行调用即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		Seckill seckill = <span class="keyword">new</span> SeckillTime();</span><br><span class="line">		</span><br><span class="line">		SeckillButton planeButton = <span class="keyword">new</span> ConcreteButton(<span class="string">&quot;机票&quot;</span>);</span><br><span class="line">		SeckillButton travelButton = <span class="keyword">new</span> ConcreteButton(<span class="string">&quot;门票&quot;</span>);</span><br><span class="line">		SeckillButton allButton = <span class="keyword">new</span> ConcreteButtonall();</span><br><span class="line">		</span><br><span class="line">		seckill.attach(planeButton);</span><br><span class="line">		seckill.attach(travelButton);</span><br><span class="line">		seckill.attach(allButton);</span><br><span class="line">		</span><br><span class="line">		seckill.notifyseckill();</span><br><span class="line">	&#125;</span><br><span class="line"><span class="number">1234567891011121314</span></span><br></pre></td></tr></table></figure>
<h2 id="Quartz设计计时器"><a href="#Quartz设计计时器" class="headerlink" title="Quartz设计计时器"></a>Quartz设计计时器</h2><p>但是这里如果我们要用Quartz写一个计时器，就要将上面的客户端类进行修改。先说一下Quartz的简单运用。</p>
<p>首先，需要导入Quartz需要的包。如果创建的项目是maven项目的话，可以在pom.xml文件中直接加上Quartz的依赖即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">  	&lt;dependency&gt;</span><br><span class="line">  		&lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;</span><br><span class="line">  		&lt;artifactId&gt;quartz&lt;/artifactId&gt;</span><br><span class="line">  		&lt;version&gt;2.2.1&lt;/version&gt;</span><br><span class="line">  	&lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure>

<p>如果不想建立maven项目，也可以自行下载jar包进行导入即可，我这里创建的是Web项目，所以直接将jar包导入到lib文件中即可，如果不是Web项目只需要自行创建一个lib文件就行，由于比较简单，这里就不说明了。<br><img src="https://img-blog.csdnimg.cn/20200716005334725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70" alt="Quartz依赖的jar包"><br>依赖的jar包可在这里<a href="https://blog.csdn.net/weixin_47211461/article/details/107362104">http://www.quartz-scheduler.org/</a>下载<br>如果网速不行可上<a href="https://blog.csdn.net/weixin_47211461/article/details/107362104">https://www.jb51.net/softs/539791.html</a>。<br>实际用到的jar包有三个：quartz-2.2.1.jar，c3p0-0.9.1.1.jar，slf4j-api-1.6.6.jar</p>
<p>Quartz的简单理解就是在什么时间去做什么事情，它的使用思路分为三步：</p>
<ol>
<li>job - 任务 - - 你要做什么事？</li>
<li>Trigger - 触发器 - - 你什么时候去做？</li>
<li>Scheduler - 任务调度 - - 你什么时候需要去做什么事？</li>
</ol>
<p>其中第3部是对前两步的整合，使其能合到一起，产生作用。要做一个开启秒杀按钮的计时器，我们就要先创建一个Job类，Job类中放的就是我们要做的事，这里我们需要它到预订的时间打开秒杀按钮，在观察者模式中也就是将上面客户端类的中目标类的通知方法notifyseckill()放到这个类中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Quartz计时器工作类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzSeckill</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext arg0)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">	<span class="comment">/*execute方法中为待做事务*/</span></span><br><span class="line">		<span class="comment">// 获取当前时间：</span></span><br><span class="line">		System.out.println(<span class="string">&quot;当前时间为：&quot;</span>+<span class="keyword">new</span> Date());</span><br><span class="line">		Seckill seckill = <span class="keyword">new</span> SeckillTime();</span><br><span class="line">		</span><br><span class="line">		SeckillButton planeButton = <span class="keyword">new</span> ConcreteButton(<span class="string">&quot;机票&quot;</span>);</span><br><span class="line">		SeckillButton travelButton = <span class="keyword">new</span> ConcreteButton(<span class="string">&quot;门票&quot;</span>);</span><br><span class="line">		SeckillButton allButton = <span class="keyword">new</span> ConcreteButtonall();</span><br><span class="line">		</span><br><span class="line">		seckill.attach(planeButton);</span><br><span class="line">		seckill.attach(travelButton);</span><br><span class="line">		seckill.attach(allButton);</span><br><span class="line">		</span><br><span class="line">		seckill.notifyseckill();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">123456789101112131415161718192021222324</span></span><br></pre></td></tr></table></figure>

<p>再写一个客户端类Client，分别创建Job、Trigger、Scheduler对象，完成对代办事务设置什么时间，要做的事情，以及将两者整合到一起的工作。具体看代码中的注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.quartz.CronScheduleBuilder;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobBuilder;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobDetail;</span><br><span class="line"><span class="keyword">import</span> org.quartz.Scheduler;</span><br><span class="line"><span class="keyword">import</span> org.quartz.SchedulerException;</span><br><span class="line"><span class="keyword">import</span> org.quartz.Trigger;</span><br><span class="line"><span class="keyword">import</span> org.quartz.TriggerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.quartz.impl.StdSchedulerFactory;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户测试类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 这里写一个最简单的设置秒杀时间的方法，如果作为Web秒杀系统的应用可以写个后台管理系统设置秒杀时间，</span></span><br><span class="line"><span class="comment">		 * 然后系统获取时间，再引cron表达式的转化模块，就可以添加到下面的计时器使用。</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		String[] str = <span class="keyword">new</span> String[<span class="number">5</span>];</span><br><span class="line">		System.out.print(<span class="string">&quot;请设置秒杀时间（月 日 时 分 秒）：&quot;</span>);</span><br><span class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">5</span> ; i++) &#123;</span><br><span class="line">            str[i]=in.next();</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;618携程网的秒杀活动将于2020年&quot;</span>+str[<span class="number">0</span>]+<span class="string">&quot;月&quot;</span>+str[<span class="number">1</span>]+<span class="string">&quot;日&quot;</span>+str[<span class="number">2</span>]+<span class="string">&quot;点&quot;</span>+str[<span class="number">3</span>]+<span class="string">&quot;分&quot;</span>+str[<span class="number">4</span>]+<span class="string">&quot;秒开始&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;当前时间为：&quot;</span>+<span class="keyword">new</span> Date());</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 通过Quartz设计一个简单的计时器</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="comment">//1.创建Job对象：做什么事？</span></span><br><span class="line">		JobDetail job = JobBuilder.newJob(QuartzSeckill.class).build();</span><br><span class="line">				</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 简单的trigger触发时间:通过Quartz提供的一个方法来完成简单的重复调用，下方注解的代码句</span></span><br><span class="line"><span class="comment">		 * cron Trigger:按照Cron的表达式来给定触发时间  	Cron表达式样式：&quot;0 05 23 8 7 ? *&quot;</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="comment">//2.创建Trigger对象，在什么时间做？</span></span><br><span class="line">		<span class="comment">/*Trigger trigger = TriggerBuilder.newTrigger().withSchedule(SimpleScheduleBuilder.repeatSecondlyForever()).build(); */</span></span><br><span class="line">				</span><br><span class="line">		Trigger trigger = TriggerBuilder.newTrigger().withSchedule(CronScheduleBuilder.cronSchedule(str[<span class="number">4</span>]+<span class="string">&quot; &quot;</span>+str[<span class="number">3</span>]+<span class="string">&quot; &quot;</span>+str[<span class="number">2</span>]+<span class="string">&quot; &quot;</span>+str[<span class="number">1</span>]+<span class="string">&quot; &quot;</span>+str[<span class="number">0</span>]+<span class="string">&quot; ? *&quot;</span>)).build();</span><br><span class="line">				</span><br><span class="line">		<span class="comment">//3.创建Scheduler对象，在什么时间做什么事？</span></span><br><span class="line">		Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line">		scheduler.scheduleJob(job, trigger);</span><br><span class="line">				</span><br><span class="line">		<span class="comment">//启动</span></span><br><span class="line">		scheduler.start();		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455</span></span><br></pre></td></tr></table></figure>

<h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p><img src="https://img-blog.csdnimg.cn/20200716013053889.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70" alt="运行结果图"><br>以上就是运用Quartz和观察者模式对于启动秒杀按钮案例的所有内容，仅作为学习笔记做记录。如果能帮助到你，是我荣幸。有错误的地方也请大家帮忙指正，谢谢！</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>观察者模式</tag>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>【笔记】Java Web的部分知识点回顾</title>
    <url>/2019/07/31/%E3%80%90%E7%AC%94%E8%AE%B0%E3%80%91Java%20Web%E7%9A%84%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E7%82%B9%E5%9B%9E%E9%A1%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h2><p>HTML的拓展名为html和htm，htm是老的命名规范。<br>HTML文件直接由浏览器解析执行，无需编译，直接由上而下以此解析执行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;font&gt;内容体&lt;&#x2F;font&gt;</span><br></pre></td></tr></table></figure>
<p>没有内容体的标签叫空标签，仅由一个标签组成，例如：<br/>  自关闭。<br>HTML标签是有属性的，格式为：属性名=”属性值”属性值用引号引起，引号包含单引号和双引号。</p>
<h2 id="块标签"><a href="#块标签" class="headerlink" title="块标签"></a>块标签</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>
<p>行级的块标签，有多少内容就会占用多大空间。不会自动换行，使用户少量数据展示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>块级的块标签，默认占满一行，会自动换行，适用于大量数据展示。</p>
<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">      表单点击提交按钮，提交数据时。</span></span><br><span class="line"><span class="comment">      ?参数列表</span></span><br><span class="line"><span class="comment">      参数列表格式：</span></span><br><span class="line"><span class="comment">          参数1=参数值1&amp;参数2=参数值2&amp;参数3=参数值3</span></span><br><span class="line"><span class="comment">      </span></span><br><span class="line"><span class="comment">      on表示选中</span></span><br><span class="line"><span class="comment">      ?sex=on</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      单选框，用户只能选择，不能输入，指定value属性。否则提交的都是on</span></span><br><span class="line"><span class="comment">      文本框，用户可以自由输入。不一定指定value属性。</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;man&quot;</span>&gt;</span>男</span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;woman&quot;</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong><code>&lt;input/&gt;</code>标签</strong><br>表单输入项标签之一，用户在该标签上通过填写和选择进行数据的输入。类似于java的Scanner类。<br>    type：设置该标签的种类<br>        text：文本框，默认<br>        password：密码框，内容为非明文<br>        radio：单选框，在同一组内有单选效果<br>        checkbox：复选框，在同一组内有复选效果<br>        submit：提交按钮，用户控制表单提交数据<br>        reset：重置按钮，用于将表单输入项恢复到默认状态<br>        file：附件框，用于文件上传<br>        hidden：隐藏域，一般用作提交服务器需要拿到，但用户不需要看到的数据，如id<br>        button：普通按钮，需要和js事件一起用<br> <img src="https://img-blog.csdnimg.cn/20200929233401359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="表单属性" style="zoom:150%;" /></p>
<p><strong>选择框标签</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt; select&gt;&lt;&#x2F; select&gt;</span><br></pre></td></tr></table></figure>
<p>定义一个选择框</p>
<p>name:设置该标签对应的参数名<br>multiple:设置该标签选项全部显示,并且可以进行多选提交。默认为单选。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;option&gt;&lt; option&gt; </span><br></pre></td></tr></table></figure>
<p>选项标签，用于为一个选择框添加一个选项<br>value:设置需要提交的参数值。<br>selected:设置选项的默认选中状态</p>
<p>注意事项：<br>    Option的内容体一般是用来进行展示<br>    参数值应该是 option的value属性值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;aihao&quot;</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;游泳&quot;</span>&gt;</span>游泳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;下棋&quot;</span>&gt;</span>下棋<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;魔术&quot;</span>&gt;</span>魔术<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>文本域和文本框的区别<br>&emsp;&emsp;①文本框不能换行，文本域可以<br>&emsp;&emsp;②文本框参数值是value属性，文本域参数值是标签的内容体</p>
<p><strong>from的两个属性：</strong></p>
<ul>
<li>action:将数据提交到何处<br>&emsp;&emsp;&emsp;默认提交到本页。<br>&emsp;&emsp;&emsp;本机内网路径:<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;相对路径<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;绝对路径<br>&emsp;&emsp;&emsp;互联网路径<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<a href="http://www.baidu.com/xxx">http://www.baidu.com/xxx</a></li>
<li>method:将数据以何种方式提交<br>&emsp;&emsp;&emsp;默认为:get<br>&emsp;&emsp;&emsp;提交方式可定义:get或者post<br>&emsp;&emsp;&emsp;<br>&emsp;&emsp;&emsp;Get提交方式特点:把数据拼接到地址栏上<br>&emsp;&emsp;&emsp;Post提交方式特点：没有把提交数据拼接到地址栏上，请求体</li>
</ul>
<p>Get和post提交方式区别:<br>①    get提交的参数列表拼接到了地址栏后面<br>&emsp;&emsp;post方式不会拼接地址栏</p>
<p>②    get方式提交的数据敏感信息不安全<br>&emsp;&emsp;Post方式提交的数据相对安全</p>
<p>③    get方式提交的数据量有限的<br>&emsp;&emsp;Post方式从理论上提交的数据量无限大</p>
<p>URL编码的表现形式&amp;本质<br>&emsp;&emsp;①你好，进行普通的编码,编码成字节数组【使用的是页面规定的字符集,例如utf-8】<br>&emsp;&emsp;②字节数组中的每一个元素,都会从10进制，转为16进制3把已经转为16进制的字节数组，以%进行拼接拼接出的字符串,就是URL编码后的结果</p>
<p>例如:你好,用UTF8编码，编码的字节数组为:<br>&emsp;&emsp;[-28,-67,-96,-27,-91,-67]</p>
<p>URL编码后:<br>&emsp;&emsp;%E4BD%%A5%BD</p>
<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p>css(Cascading Style Sheets):层叠样式表<br>层叠:一层一层叠加<br>样式表:存储样式的地方,多个样式</p>
<p><strong>设置边框的样式</strong><br>格式:宽度样式颜色<br>例如: <code>border:1 px solid red</code> ，1像素粗的实线红色边框。<br>线条样式: solid实线,none无边, double双线</p>
<p>width：用于设置标签的宽度<br>height：用于设置标签的高度</p>
<h2 id="float"><a href="#float" class="headerlink" title="float"></a>float</h2><p>通常默认的排版方式,将页面中的元素从上到下一一罗列，而实际开发中，需要左右方式进行排版，就需要使用浮动属性</p>
<p>格式:<br><code>选择器&#123;float:属性值;&#125;</code><br>常用属性值:<br>&emsp;&emsp;none:元素不浮动(默认值)<br>&emsp;&emsp;left:元素向左浮动<br>&emsp;&emsp;right:元素向右浮动</p>
<p>注意:因为元素设置浮动属性后，会脱离原有文档流(会脱离原有的板式)，从而会影响其他元素的样式，所以设置浮动以后，页面样式需要重新调整</p>
<h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><p>display属性可以使得元素在行内元素和块元素之间相互转换。</p>
<p>&emsp;&emsp;格式:<br>&emsp;&emsp;<code>选择器&#123;display:属性值&#125;</code><br>&emsp;&emsp;常用的属性值:<br>&emsp;&emsp;&emsp;&emsp;block:此元素将显为块元素(块元素默认的display属性值)<br>&emsp;&emsp;&emsp;&emsp;inline:此元素将显示为行内元素(行内元素默认的 display属性值)<br>&emsp;&emsp;&emsp;&emsp;none:此元素将被隐藏,不显示,也不占用页面空间。</p>
<h2 id="内外边距（盒子模型）"><a href="#内外边距（盒子模型）" class="headerlink" title="内外边距（盒子模型）"></a>内外边距（盒子模型）</h2><p> <img src="https://img-blog.csdnimg.cn/20200929235041979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="内外边距"></p>
<h2 id="外部链接CSS文件"><a href="#外部链接CSS文件" class="headerlink" title="外部链接CSS文件"></a>外部链接CSS文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link&#x2F;&gt;</span><br></pre></td></tr></table></figure>
<p>又称为链入式，是将所有的样式放在一个或多个以css为扩展名的外部样式表文件中，通过link标签将样式连接到HML文档中</p>
<p>格式:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;”stylesheet&quot; type&#x3D;”text&#x2F;css” href&#x3D;”css文件路径&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>
<p>rel=”stylesheet” , 固定值,表示样式表<br>type=”text/css” , 固定值,表示css类型<br>href  , 表示css文件位置</p>
<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p>JavaScript是WEB上强大的脚本语言。</p>
<p>脚本语言: 无法独立执行。必须嵌入到其他语言中,结合使用。直接被浏览器解析执行。</p>
<p>Java编程语言: 独立写程序,独立运行。编译–执行作用:控制页面特效展示。</p>
<p>例如:<br>&emsp;&emsp;JS可以对HTML元素进行动态控制<br>&emsp;&emsp;JS可以对表单项进行校验<br>&emsp;&emsp;JS可以控制CSS的样式</p>
<p>注意：</p>
<ul>
<li>JavaScript没有访问系统文件的权限（安全）</li>
<li>由于JavaScript无需编译，是由上到下依次解释执行，所以在保证可读性的情况下，允许使用链式编程</li>
<li>JavaScript和java没有任何直接关系</li>
</ul>
<h2 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h2><p> <img src="https://img-blog.csdnimg.cn/20200930000957502.png#pic_center" alt="JavaScript的组成"></p>
<ul>
<li>ECMAScript(核心)：规定了S的语法和基本对象</li>
<li>DOM文档对象模型：处理网页内容的方法和接口<br>标记型文档。HTML</li>
<li>BOM浏览器对象模型：与浏览器交互的方法和接口</li>
</ul>
<h2 id="JavaScript书写规范"><a href="#JavaScript书写规范" class="headerlink" title="JavaScript书写规范"></a>JavaScript书写规范</h2><p>在当前页面内部写 script标签，script内部即可书写 JavaScript代码<br>格式:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt; </span><br><span class="line">JavaScript的代码</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>注: script标签理论上可以书写在HTML文件的任意位置</p>
<p>外部引入：<br>在HTML文档中,通过<code>&lt;script src=&quot;&quot;&gt;</code>标签引入js文件<br>格式:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=”text/javascript”src=”javascript文件路径”&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>示例1:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;demo.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>注：外部引用时 script标签内不能有 script代码，即使写了也不会执行<br>示例2：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;demo. js&quot;</span>&gt;</span><br><span class="line">	<span class="comment">//这部分代码不会被执行,因为被引入的demo.js代码覆盖 </span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>script标签的放置位置：<br>开发规范规定，script标签的放置位置为：Body结束标签前。</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量：标示内存中的一块空间，用于存储数据，且数据是可变的。<br>变量的声明：<br><code>var 变量名;    </code>    变量赋子默认值,默认值为 undefined(未定义的)</p>
<p>变量的声明和赋值：<br><code>var 变量名=值;</code>    变量赋予对应的值</p>
<p>在声明 JavaScript变量时，需要遵循以下命名规范:</p>
<ul>
<li>必须以字母或下划线开头，中间可以是数字、字符或下划线</li>
<li>变量名不能包含空格等符号</li>
<li>不能使用JavaScript关键字作为变量名，如：function </li>
<li>JavaScript严格区分大小写</li>
</ul>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>类似于java中的基本数据类型</p>
<ul>
<li>string&emsp;&emsp;&emsp;字符串类型。””和’’都是字符串。 JavaScript中没有单个字符</li>
<li>Boolean    &emsp; 布尔类型。固定值为true和 false </li>
<li>number&emsp;&emsp;数字类型。任意数字</li>
<li>null&emsp;&emsp;&emsp;&emsp;空,一个占位符。</li>
<li>undefined&emsp;未定义类型,该类型只有一个固定值，即undefined，表示变量声明却未定义具体的值。</li>
</ul>
<p>注：因为 undefined是从null中派生出来的，所以 undefined==null </p>
<p>JavaScript区别于java，是弱类型语言，变量的使用不用严格遵循规范，所以一个变量声明好之后，是可以赋予任意类型的值。</p>
<p>通过 typeof运算符可以分辨变量值属于哪种基本数据类型。<br>对变重或值调用 typeof运算符将返回下列值之一：</p>
<ul>
<li>undefined - 如果变量是 Undefined类型的 </li>
<li>Boolean - 如果变量是 Boolean类型的</li>
<li>number - 如果变量是Number类型的</li>
<li>string - 如果变量是String类型的</li>
<li>object - 如果变量是一种引用类型或Null类型的</li>
</ul>
<h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><p>引用类型通常叫做类(class)，但在 JavaScript中，因为不存在编译过程,所以没有类的概念，所处理的引用数据类型都是对象</p>
<p>标准创建方式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str= <span class="keyword">new</span> <span class="built_in">String</span>();		    <span class="comment">//和java相同</span></span><br><span class="line"><span class="keyword">var</span> str= <span class="keyword">new</span> <span class="built_in">String</span>;			<span class="comment">//js独有的方式</span></span><br></pre></td></tr></table></figure>
<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>与java基本类似，唯一不同，多了全等符：===</p>
<p><code>==</code>&emsp;&emsp;逻辑等。仅仅对比值<br><code>===</code>    &emsp;全等。对比值并且对比类型<br>&emsp;&emsp;&emsp;如果值和类型都相同，则为true；值和类型有一个不同，则为false</p>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th align="center">例子</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>&amp;&amp;</code></td>
<td align="center">and</td>
<td align="center"><code>(x&lt;10&amp;&amp;y&gt;1)</code>为true</td>
</tr>
<tr>
<td align="center">&#124;&#124;</td>
<td align="center">or</td>
<td align="center">(x==5&#124;&#124;y==5)为false</td>
</tr>
<tr>
<td align="center"><code>！</code></td>
<td align="center">not</td>
<td align="center"><code>!(x==y)</code>为true</td>
</tr>
</tbody></table>
<p>注：JavaScript逻辑运算符没有<code>&amp;</code>和<code>|</code></p>
<h2 id="RegExp对象"><a href="#RegExp对象" class="headerlink" title="RegExp对象"></a>RegExp对象</h2><h3 id="RegExp对象的创建方式"><a href="#RegExp对象的创建方式" class="headerlink" title="RegExp对象的创建方式"></a>RegExp对象的创建方式</h3><ul>
<li><code>var reg=new RegExp(“表达式&quot;);</code>&emsp;&emsp;(开发中基本不用)</li>
<li><code>var reg=/^表达式S/</code>&emsp;&emsp;直接量(开发中常用)<br>直接量中存在边界，<code>^</code>即代表开始，<code>$</code>代表结束<br>直接量方式的正则是对象，不是字符串，别用引号</li>
</ul>
<h3 id="test方法"><a href="#test方法" class="headerlink" title="test方法"></a>test方法</h3><p><code>正则对象.test(string);</code>&emsp;&emsp;用来校验字符是否匹配正则。<br>全部字符匹配返回true；有字符不匹配返回 false</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">//直接量方式：眼睛里揉不得沙子</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//必须全部字符符合正则，返回true</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//有一个字符不符合正则，就会返回false</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> reg = <span class="regexp">/^\s*$/</span>;  <span class="comment">//0~多个空格</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> flag = reg.test(<span class="string">&quot;   a   &quot;</span>);</span></span><br><span class="line">  alert(flag);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 普通方式</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 普通方式。除非全部字符不符合正则，返回false</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 只要有一个字符符合正则就返回true</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> reg = <span class="regexp">/\s+/</span>;  <span class="comment">//1~多个空格</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> flag = reg.test(<span class="string">&quot;aaa&quot;</span>);</span></span><br><span class="line">  alert(flag);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="正则对象使用注意事项"><a href="#正则对象使用注意事项" class="headerlink" title="正则对象使用注意事项"></a>正则对象使用注意事项</h3><p><code>/^表达式$/</code>&emsp;只要有无法成立正则的字符存在，即为 false<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;&nbsp;全部符合为true<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;&nbsp;(检查严格,眼睛不揉沙子)<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;&nbsp;适用于表单校验</p>
<p><code>/表达式/</code>&emsp;只要有成立正则的字符存在，即为true<br>&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;&nbsp;全部不符合为 false<br>&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;&nbsp;(检查不严格,懒人思想)<br>&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;&nbsp;适用于字符串查找、替换</p>
<h2 id="JS数组对象"><a href="#JS数组对象" class="headerlink" title="JS数组对象"></a>JS数组对象</h2><h3 id="JS数组的特性"><a href="#JS数组的特性" class="headerlink" title="JS数组的特性"></a>JS数组的特性</h3><p><font color="red">js数组可以看做Java中的 ArrayList集合。</font></p>
<ul>
<li>数组中的每一个成员没有类型限制，及可以存放任意类型</li>
<li>数组的长度可以自动修改</li>
</ul>
<h3 id="JS数组的四种创建方式"><a href="#JS数组的四种创建方式" class="headerlink" title="JS数组的四种创建方式"></a>JS数组的四种创建方式</h3><ol>
<li><code>var arr=[1,2,3,”a”,true];</code>&emsp;常用的JS数组。长度5</li>
<li><code>var arr new Array();</code>&emsp;创建一个数组对象,数组长度默认为0</li>
<li><code>var arr= new Array(4);</code>&emsp;数组长度是4，相当于开辟了长度为4的空间，每个元素是 undefined(仅在显示数组时进行处理，undefined为了方便显示变成了空字符串形式，其值本质仍然是 undefined)</li>
<li><code>var arr= new Array(1,2);</code>&emsp;数组元素是1，2</li>
</ol>
<h3 id="JS数组的常用属性-方法"><a href="#JS数组的常用属性-方法" class="headerlink" title="JS数组的常用属性/方法"></a>JS数组的常用属性/方法</h3><p> <img src="https://img-blog.csdnimg.cn/20200930003856940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="JS数组的常用属性/方法"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// join(string) 可以将数组每个元素根据分隔符进行拼接，最后返回一个字符串</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// var arr = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;];</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// var result = arr.join(&quot;+&quot;);</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// alert(result);</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// alert(arr.length);//4</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// reverse()     可以将数组进行物理翻转</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 该方法的返回值    就是翻转成功的新数组</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 会对当前的数组进行操作，翻转操作</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>];</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> arr2 = arr.reverse();</span></span><br><span class="line">  alert(arr2);</span><br><span class="line">  alert(arr);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// pop()      删除并且返回数组的最后一个元素</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>];</span></span><br><span class="line">  alert(arr.length);</span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> temp = arr.pop();</span></span><br><span class="line">  alert(temp);</span><br><span class="line">  alert(arr.length);</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// push(需要追加的元素)     向数组的末尾追加一个或者多个元素，返回数组的新长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>];</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 追加一个元素</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> len = arr.push(<span class="string">&#x27;e&#x27;</span>);</span></span><br><span class="line">  alert(len);</span><br><span class="line">  alert(arr);</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 追加多个元素</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> len = arr.push(<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>);</span></span><br><span class="line">  alert(len);</span><br><span class="line">  alert(arr);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="eval-String-函数"><a href="#eval-String-函数" class="headerlink" title="eval(String)函数"></a>eval(String)函数</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// eval(string)      可以把传入的字符串，作为JavaScript代码</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 可以扩展程序功能</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 注意事项：只能传递基本数据类型的字符串，而不能传入字符串对象</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> x = <span class="number">10</span>;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">eval</span>(<span class="string">&quot;var x = 10;&quot;</span>);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">eval</span>(<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;var x = 10;&quot;</span>));</span></span><br><span class="line">  alert(x);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>作用：用于增强程序的扩展性<br>注：只可以传递原始数据类型string，传递String对象无作用</p>
<h2 id="编码和解码"><a href="#编码和解码" class="headerlink" title="编码和解码"></a>编码和解码</h2><p>URL编码：中文及特殊符号            %16进制<br>作用：保证数据传递的完整性</p>
<table>
<thead>
<tr>
<th align="center">代码</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">encodeURI()</td>
<td align="center">把字符串编码为URI</td>
</tr>
<tr>
<td align="center">decodeURI()</td>
<td align="center">解码某个编码的URI</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">//javascript</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//encodeURI(string)     就会对字符串进行URI编码，返回值就是编码后的结果</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> msg = <span class="string">&quot;http://www.rainying.com/index.html?username=张三&amp;password=123&quot;</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// alert(msg);</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> temp = <span class="built_in">encodeURI</span>(msg);</span></span><br><span class="line"><span class="javascript">  <span class="comment">// alert(temp);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// decodeURI(string)    就会对字符串进行URI解码，返回值就是解码后的结果</span></span></span><br><span class="line"><span class="javascript">  alert(<span class="built_in">decodeURI</span>(temp));</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>URI和URL的区别</strong><br>URI是统一资源标识符。&emsp;标识资源详细名称<br>URL是统一资源定位器。&emsp;定位资源的网络位置</p>
<p>资源:可以通过浏览器访问的信息统统称为资源(图片、文本、HTML、CS等等….)</p>
<p>URI标识资源的详细名称，包含资源名。</p>
<p>URL定位资源的网络位置，包含 URLhttp://</p>
<p>例如:</p>
<blockquote>
<p><a href="http://www.rainying.com/&emsp;&emsp;&emsp;&emsp;&emsp;%E6%98%AFURL">http://www.rainying.com/&emsp;&emsp;&emsp;&emsp;&emsp;是URL</a></p>
</blockquote>
<blockquote>
<p>/a.html&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;是URl</p>
</blockquote>
<blockquote>
<p>http: //<a href="http://www.rainying.com/a.html&emsp;&emsp;%E5%8D%B3%E6%98%AFURL%EF%BC%8C%E4%B9%9F%E6%98%AFURI">www.rainying.com/a.html&emsp;&emsp;即是URL，也是URI</a></p>
</blockquote>
<h2 id="字符串转数字"><a href="#字符串转数字" class="headerlink" title="字符串转数字"></a>字符串转数字</h2><table>
<thead>
<tr>
<th align="center">代码</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">parselnt()</td>
<td align="center">解析个字符串并返回一个整数</td>
</tr>
<tr>
<td align="center">parseFloat()</td>
<td align="center">解析一个字符串并返回一个浮点数</td>
</tr>
</tbody></table>
<p><code>parselnt(string);</code>string按照字面值转换为整数类型,小数点后面部分不关注。</p>
<p><code>parseFloat(string);</code>string按照字面值转换为小数类型。</p>
<p>注:</p>
<ul>
<li>如果字符串的某个字符从字面值上无法转为数字，那么从该字符开始停止转换,仅返回前面正确的转换值。(例如：11.5a55，parseInt结果11，parseFloat结果11.5)</li>
<li>如果字符串的第一个字符就无法从字面值上转为数字,那么停止转换,返回NaN( Not A Number，一个数字类型的标识，表示不是一个正确的数字</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> str = <span class="string">&quot;10.55&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> str = <span class="string">&quot;10.55a&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> str = <span class="string">&quot;10.5a5&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> str = <span class="string">&quot;1a0.55&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> str = <span class="string">&quot;a10.55&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// NaN    (Not A Number)    不是一个数字</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 是一个数字类型的标识，专门标识当前的值  不是数字</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(str);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> num2 = <span class="built_in">parseFloat</span>(str);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  alert(<span class="keyword">typeof</span>(num1)+<span class="string">&quot;:&quot;</span>+num1);</span></span><br><span class="line"><span class="javascript">  alert(<span class="keyword">typeof</span>(num2)+<span class="string">&quot;:&quot;</span>+num2);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><h3 id="函数格式"><a href="#函数格式" class="headerlink" title="函数格式"></a>函数格式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 方法名(参数列表)&#123;</span><br><span class="line">		函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>JavaScript函数定义必须用小写的 function；</li>
<li>JavaScript函数无需定义返回值类型,直接在 function后面书写方法名；</li>
<li>参数的定义无需使用yar关键字,否则报错；</li>
<li>JavaScript函数体中，return可以不写，也可以return具体值,或者仅仅写return;</li>
</ul>
<h3 id="函数使用的注意事项"><a href="#函数使用的注意事项" class="headerlink" title="函数使用的注意事项"></a>函数使用的注意事项</h3><p>&emsp;&emsp;<font color="red">JavaScript函数调用执行完毕一定有返回值，值及类型根据return决定，如果未 return具体值，返回值为 undefined</font><br>&emsp;&emsp;JavaScript函数若同名，则不存在方法重载，只有方法相互覆盖，最后定义的函数覆盖之前的定义;<br>&emsp;&emsp;因为JavaScript不存在函数重载，所以JavaScript仅根据方法名来调用函数，即使实参与函数的形参不匹配，也不会影响正常调用。<br>&emsp;&emsp;如果形参未赋值，就是用默认值undefined。</p>
<h2 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h2><h3 id="function构造函数"><a href="#function构造函数" class="headerlink" title="function构造函数"></a>function构造函数</h3><p>我们知道，JavaScript中的引用数据类型都是对象，而对象在 JavaScript中可以用函数来表示。<br>相当于java中创建某个 class类</p>
<ul>
<li>无形参格式:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 对象名()&#123;</span><br><span class="line">	函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 定义/声明了一个Person对象</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 定义对象的属性</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// name     age</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// this   ————&gt; 当前的Person对象</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.name = <span class="string">&quot;小张&quot;</span>；</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.age = <span class="string">&quot;18&quot;</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 创建了一个Person对象，p</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span></span><br><span class="line">  alert(p.name);</span><br><span class="line">  alert(p.age);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 为属性赋值</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 1、构造参数赋值</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 2、创建对象后，调用属性进行赋值</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">n,a</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.name = n;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.age = a;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 创建了一个Person对象，p</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">&quot;小王&quot;</span>,<span class="string">&quot;20&quot;</span>);</span></span><br><span class="line">  alert(p.name);</span><br><span class="line">  alert(p.age);</span><br><span class="line"><span class="javascript">  p.name = <span class="string">&quot;小李&quot;</span>;</span></span><br><span class="line">  alert(p.name);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 属性定义方式</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 1、this关键字，在对象声明定义阶段，定义一个属性</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 2、创建对象后，使用  对象.属性  方式动态定义属性</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">n,a</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.name = n;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.age = a;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">//创建了一个Person对象，p</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">&quot;小王&quot;</span>,<span class="string">&quot;20&quot;</span>);</span></span><br><span class="line"><span class="javascript">  p.sex = <span class="string">&quot;男&quot;</span>;   <span class="comment">//为Person对象  声明并赋值成功</span></span></span><br><span class="line">  alert(p.sex);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="对象直接量"><a href="#对象直接量" class="headerlink" title="对象直接量"></a>对象直接量</h3><p>开发中可以用一种简单的方式直接创建自定义的JavaScript对象，这种方式称为“对象直接量”</p>
<p>格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var 对象名=&#123;属性名1:”属性值1”, 属性名2:”属性值2”, 属性名3:”属性值3”……&#125;;</span><br></pre></td></tr></table></figure>

<p>注:该方式直接创建出实例对象，无需构建函数，无需再new创建实例对象直接使用即可</p>
<h2 id="BOM对象"><a href="#BOM对象" class="headerlink" title="BOM对象"></a>BOM对象</h2><h3 id="BOM对象简述"><a href="#BOM对象简述" class="headerlink" title="BOM对象简述"></a>BOM对象简述</h3><p>BOM(Browser Object Model)浏览器对象模型<br>浏览器：IE、火狐、谷歌等<br>作用：用来执行浏览器的相关操作。(例如:浏览器的地址、弹出消息等)</p>
<p>一般情况下， window代表了BOM对象。<br> window对象是 JavaScript的内置对象，使用 window对象调用方法时可以省略 window不写。</p>
<h3 id="消息框"><a href="#消息框" class="headerlink" title="消息框"></a>消息框</h3><ol>
<li>alert()<br>警告框：用来弹出警告消息。</li>
</ol>
<p>&emsp;&emsp;示例：</p>
<blockquote>
<p>alert(“你好”);</p>
</blockquote>
<p>&emsp;&emsp;注：不同浏览器显示的组件样式不同，无需关注。</p>
<ol start="2">
<li>confirm()<br>&emsp;确认框，用于告知用户信息并收集用户的选择<br>&emsp;示例1：</li>
</ol>
<blockquote>
<p>confirm(“确定 或者 取消”);</p>
</blockquote>
<p>&emsp;&emsp;&emsp;效果：<br> <img src="https://img-blog.csdnimg.cn/20200930091916804.png#pic_center" alt="示例1"></p>
<p>&emsp;&emsp;&emsp;该方法有返回值，用户通过选择“确定”或者“取消”，方法结束会返回boolean类型的值。</p>
<h3 id="循环定时器的设置和取消"><a href="#循环定时器的设置和取消" class="headerlink" title="循环定时器的设置和取消"></a>循环定时器的设置和取消</h3><h4 id="启动循环定时器-setInterval"><a href="#启动循环定时器-setInterval" class="headerlink" title="启动循环定时器- setInterval()"></a>启动循环定时器- setInterval()</h4><p>循环定时器，调用一次就会创建并循环执行一个定时器。</p>
<p>格式：</p>
<blockquote>
<p>setInterval(调用方法,毫秒值)<br>//毫秒值：循环周期</p>
</blockquote>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	alert(“我是run1”);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行下句后,每隔1秒就会调用一次run1方法 </span></span><br><span class="line"><span class="built_in">setInterval</span> (“run1()”,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p>效果：（每隔一秒就会弹出一次对话框）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> id;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 需要两秒后执行一次run1方法</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">run1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    alert(<span class="string">&quot;run1&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 执行一次run1方法，清除对应的定时器</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">clearInterval</span>(id);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  id = <span class="built_in">setInterval</span>(<span class="string">&quot;run1()&quot;</span>,<span class="number">2000</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="启动一次性定时器setTimeout"><a href="#启动一次性定时器setTimeout" class="headerlink" title="启动一次性定时器setTimeout()"></a>启动一次性定时器setTimeout()</h4><p>一次性定时器,调用一次就会创建并执行一个定时器一次。</p>
<p>格式：</p>
<blockquote>
<p>setTimeout(调用方法,毫秒值)</p>
</blockquote>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	alert(“我是run1”);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行下句后,会设置一个定时器,定时器执行一次。 </span></span><br><span class="line"><span class="built_in">setTimeout</span> (<span class="string">&quot;run10&quot;</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> id;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">run1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    alert(<span class="string">&quot;run1&quot;</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 希望两秒执行一次run1方法</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> id = <span class="built_in">setInterval</span>(<span class="string">&quot;run1()&quot;</span>,<span class="number">2000</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 取消一次性定时器</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">clearInterval</span>(id);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h3><p>location对象包含浏览器 地址栏 的信息。</p>
<p>常用属性：</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">href</td>
<td align="center">设置或返回完整的URL</td>
</tr>
</tbody></table>
<p>设置href属性，浏览器就会跳转到对应的路径</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置URL地址</span></span><br><span class="line">location.href = <span class="string">&quot;demo.html&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="DOM对象"><a href="#DOM对象" class="headerlink" title="DOM对象"></a>DOM对象</h2><h3 id="DOM对象的简述"><a href="#DOM对象的简述" class="headerlink" title="DOM对象的简述"></a>DOM对象的简述</h3><p>DOM (Document Object Model)文档对象模型<br>文档：标记型文档(HTML等)</p>
<p>DOM是将标记型文档中所有内容(标签、文本、属性)都封装成对象,<br>通过操作对象的属性或者方法，来达到操作或者改变HTML展示效果的目的。</p>
<h3 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h3><p> <img src="https://img-blog.csdnimg.cn/20200930092623435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="DOM树"></p>
<p>其中:</p>
<ul>
<li>每个标签会被加载成DOM树上的一个元素节点对象。</li>
<li>每个标签的属性会被加载成DOM树上的一个属性节点对象</li>
<li>每个标签的内容体会被加载成DOM树上的一个文本节点对象</li>
<li>整个DOM树，是一个文档节点对象,即DOM对象。</li>
<li><font color="red">一个HTML文档加载到内存中就会形成一个DOM对像</font></li>
</ul>
<p>DOM树的特点:</p>
<ul>
<li>必定会有一个根节点</li>
<li>每个节点都是节点对象</li>
<li>常见的节点关系：<strong>父子节点关系</strong></li>
<li>文本节点对象没有子节点—叶子节点</li>
<li>每个节点都有<strong>一个父节点，零到多个子节点</strong></li>
<li>只有根节点没有父节点</li>
</ul>
<h3 id="获取元素对象的四种方式"><a href="#获取元素对象的四种方式" class="headerlink" title="获取元素对象的四种方式"></a>获取元素对象的四种方式</h3><p>在 Java Script中，我们可以通过DOM对象的4种方式获取对应的元素对象：</p>
<ul>
<li><p>getElementByld：&emsp;&emsp;通过元素ID获取对应元素对象<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;可以通过ID获取对应的元素对象，如果找不到，返回null</p>
</li>
<li><p>getElementsByName：&emsp;&emsp;通过元素的name属性获取符合要求的所有元素</p>
</li>
<li><p>getElementsByTagName:    &emsp;&emsp;通过元素的元素名属性获取符合要求的所有元素</p>
</li>
<li><p>getElementsByClassName：&emsp;&emsp;通过元素的class属性获取符合要求的所有元素<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;可以获取到元素节点对象数组；如果找不到，返回空数组</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;t1&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;read&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;code&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;run&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>javaee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>android<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>ios<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>php<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> t1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;t1&quot;</span>);</span></span><br><span class="line">    alert(t1);</span><br><span class="line"><span class="javascript">    alert(<span class="built_in">document</span>.getElementById(<span class="string">&quot;t2&quot;</span>));</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 通过name属性，获取所有需要的元素</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 返回是一个元素节点对象   数组</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> arr = <span class="built_in">document</span>.getElementsByName(<span class="string">&quot;hobby&quot;</span>);</span></span><br><span class="line">    alert(arr.length);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 通过标签名，获取所有需要的元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> arr = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line">    alert(arr.length);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 通过class属性值，获取所有需要的元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> arr = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;h1&quot;</span>);</span></span><br><span class="line">    alert(arr.length);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><font color="red">注：获取某个/某些元素节点对象，必须保证元素节点对象被先加载到内存中：</font></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//文本框  元素节点对象还没有被加载</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// var t1 = document.getElementById(&quot;t1&quot;);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// alert(t1);</span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;t1&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> t1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;t1&quot;</span>);</span></span><br><span class="line">    alert(t1);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="元素对象常见属性"><a href="#元素对象常见属性" class="headerlink" title="元素对象常见属性"></a>元素对象常见属性</h3><h4 id="value"><a href="#value" class="headerlink" title="value"></a>value</h4><p><code>元素对象.value</code>&emsp;&emsp;获取元素对象的 value属性值<br><code>元素对象.value=属性值</code>&emsp;&emsp;设置元素对象的 value属性值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;t1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;你好&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//需要把t1元素value属性值，拿出来</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> t1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;t1&quot;</span>);</span></span><br><span class="line">    alert(t1.value);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//需要修改value属性值     你好么</span></span></span><br><span class="line"><span class="javascript">    t1.value = <span class="string">&quot;你好么&quot;</span>;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="className"><a href="#className" class="headerlink" title="className"></a>className</h4><p><code>元素对象.className</code>&emsp;&emsp;获取元素对象的 class属性值。<br><code>元素对象.className=属性值</code>&emsp;&emsp;设置元素对象的属性值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.ys1</span>&#123;</span></span><br><span class="line">      color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.ys2</span>&#123;</span></span><br><span class="line">      color: blue;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;s1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ys1&quot;</span>&gt;</span>今天天气好晴朗<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//需要把s1元素的value属性值，拿出来</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> s1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;s1&quot;</span>);</span></span><br><span class="line">    alert(s1.className);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    s1.className = <span class="string">&quot;ys2&quot;</span>;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="checked"><a href="#checked" class="headerlink" title="checked"></a>checked</h4><p><code>元素对象.checked</code>&emsp;&emsp;获取元素对象的 checked属性值。<br><code>元素对象.checked=属性值</code>&emsp;&emsp;设置元素对象的 checked属性值。</p>
<p>注：HTML中 <code>checked=&quot;checked”</code>，JavaScript中返回 true  false<br>修改单选/复选的选中与否</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;hobby&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//false</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> c = <span class="built_in">document</span>.getElementById(<span class="string">&quot;hobby&quot;</span>);</span></span><br><span class="line">    alert(c.checked);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//想让复选框默认选中</span></span></span><br><span class="line"><span class="javascript">    c.checked = <span class="literal">true</span>;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h4><p><code>元素对象.innerHTML</code>&emsp;&emsp;获取元素对象的内容体<br><code>元素对象.innerHTML=值</code>    &emsp;&emsp;设置元素对象的内容体</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>今天天气好晴朗<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//想要获取span的标签的内容体</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> s1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;s1&quot;</span>);</span></span><br><span class="line">    alert(s1.innerHTML);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//设置span便签的内容体    今天好像要下雪</span></span></span><br><span class="line"><span class="javascript">    s1.innerHTML=<span class="string">&quot;今天好像要下雪&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//向span标签    追加内容体信息    ，今天0度</span></span></span><br><span class="line"><span class="javascript">    s1.innerHTML += <span class="string">&quot;，今天0度&quot;</span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="JS事件"><a href="#JS事件" class="headerlink" title="JS事件"></a>JS事件</h2><h3 id="JS事件驱动机制简述"><a href="#JS事件驱动机制简述" class="headerlink" title="JS事件驱动机制简述"></a>JS事件驱动机制简述</h3><p>页面上的特效，我们可以理解在JS事件驱动机制下进行。<br>JS事件驱动机制：</p>
<ul>
<li>事件源</li>
<li>事件</li>
<li>监听器</li>
<li>注册/绑定监听器</li>
</ul>
<p>事件源：专门产生事件的组件<br>事件：由事件源所产生的动作或者事情。<br>监听器：专门处理事件源所产生的事件。<br>注册/绑定监听器：让监听器时刻监听事件源是否有指定事件产生，如果事件源产生指定事件，则调用监听器处理。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      事件源：按钮</span></span><br><span class="line"><span class="comment">      事件：点击事件    onclick</span></span><br><span class="line"><span class="comment">      监听器：run1()方法</span></span><br><span class="line"><span class="comment">      注册监听器：onclick = &quot;run1()&quot; </span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我啊&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;run1()&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="点击事件（onclick）"><a href="#点击事件（onclick）" class="headerlink" title="点击事件（onclick）"></a>点击事件（onclick）</h3><p>点击事件：由鼠标或热键点击元素组件时触发<br>示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">	&lt;script&gt;</span><br><span class="line">		<span class="function"><span class="keyword">function</span> <span class="title">run1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			alert(<span class="string">&quot;弹出&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;点我弹出对话框&quot;</span> onclick=<span class="string">&quot;run1()&quot;</span> /&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h3 id="焦点事件（onfocus-onblur）"><a href="#焦点事件（onfocus-onblur）" class="headerlink" title="焦点事件（onfocus/onblur）"></a>焦点事件（onfocus/onblur）</h3><p>焦点事件：由鼠标的焦点的有无触发<br>示例：</p>
<ol>
<li>获取焦点</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">run1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		alert(<span class="string">&quot;获取焦点了&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onfocus</span>=<span class="string">&quot;run1()&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>失去焦点</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">run1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		alert(<span class="string">&quot;失去焦点了&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;run1()&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="域内容改变事件（onchange）"><a href="#域内容改变事件（onchange）" class="headerlink" title="域内容改变事件（onchange）"></a>域内容改变事件（onchange）</h3><p>域内容改变事件：元素组件的值发生改变时触发<br>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">onchange</span>=<span class="string">&quot;run1()&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;bj&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;sh&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;gz&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="加载完毕事件（onload）"><a href="#加载完毕事件（onload）" class="headerlink" title="加载完毕事件（onload）"></a>加载完毕事件（onload）</h3><p>加载完毕事件：元素组件加载完毕时触发。<br>获取元素对象，保证元素对象先加载，建议是把获取元素对象放在最后</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">run1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		alert(<span class="string">&quot;弹出&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;run1()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="表单提交事件-onsubmit"><a href="#表单提交事件-onsubmit" class="headerlink" title="表单提交事件(onsubmit)"></a>表单提交事件(onsubmit)</h3><p>表单提交事件：表单的提交按钮被点击时触发</p>
<p>注意：该事件需要返回 boolean类型的值来执行 提交/阻止 表单数据的操作。</p>
<ul>
<li>事件得到true，提交表单数据</li>
<li>事件得到 false，阻止表单数据提交</li>
</ul>
<p>示例:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">run1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;表单的提交按钮被点击了&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">      表单提交按钮被点击-------执行run1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      onsubmit  用于表单的校验</span></span><br><span class="line"><span class="comment">      该事件也能够控制表单的提交</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      true    允许表单提交</span></span><br><span class="line"><span class="comment">      false   阻止表单提交</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return run1()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="键位弹起事件（onkeyup）"><a href="#键位弹起事件（onkeyup）" class="headerlink" title="键位弹起事件（onkeyup）"></a>键位弹起事件（onkeyup）</h3><p>键位弹起事件：在组件中输入某些内容时，键盘键位弹起时触发该事件<br>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onkeyup</span>=<span class="string">&quot;run1()&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="鼠标移入-移出事件（onmouseover-onmouseout）"><a href="#鼠标移入-移出事件（onmouseover-onmouseout）" class="headerlink" title="鼠标移入/移出事件（onmouseover/onmouseout）"></a>鼠标移入/移出事件（onmouseover/onmouseout）</h3><p>鼠标移入事件：鼠标移入/移出某个元素组件时触发<br>示例：</p>
<ol>
<li>鼠标移入文本框</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onmouseover</span>=<span class="string">&quot;run1()&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>鼠标移出文本框</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onmouseout</span>=<span class="string">&quot;run1()&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="JS事件的两种绑定方式"><a href="#JS事件的两种绑定方式" class="headerlink" title="JS事件的两种绑定方式"></a>JS事件的两种绑定方式</h2><h3 id="元素事件句柄绑定"><a href="#元素事件句柄绑定" class="headerlink" title="元素事件句柄绑定"></a>元素事件句柄绑定</h3><p>将事件以元素属性的方式写到标签内部，进而绑定对应函数。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">run1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;无参函数&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">run2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(str);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">run3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(obj.value);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 绑定一个无参函数 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1111&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;run1()&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 绑定一个有参函数，参数就是一个字符串 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2222&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;run2(&#x27;传入字符串&#x27;)&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 绑定一个有参函数，参数是一个元素对象 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3333&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;run3(this)&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 绑定多个函数 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4444&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;run1(),run2(&#x27;传入字符串&#x27;),run3(this)&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>事件句柄绑定方式<br>&emsp;&emsp;优点：&emsp;①开发快捷<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;②传参方便<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;③可以绑定多个函数<br>&emsp;&emsp;缺点：    JS和HTML代码高度糅合在一起，不利于多部门的项目开发维护</p>
<h3 id="DOM绑定方式"><a href="#DOM绑定方式" class="headerlink" title="DOM绑定方式"></a>DOM绑定方式</h3><p>使用DOM的属性方式绑定事件<br>示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">run1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		alert(<span class="string">&quot;加载完毕&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//以下两种DOM绑定方式，用哪种都可以</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//DOM绑定方式	对象.事件属性	一次只能绑定一个函数，不能传递参数</span></span><br><span class="line">	<span class="built_in">window</span>.onload=run1;</span><br><span class="line">	<span class="comment">//DOM绑定方式	匿名函数		可以绑定多个函数，可以传递参数</span></span><br><span class="line">	<span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		run1();</span><br><span class="line">	&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">run1</span>(<span class="params">obj</span>)</span>&#123;</span></span><br><span class="line">      alert(t1.value);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">//待窗口全部加载完后，方可用getElementById找到控件</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//进而对控件进行设置点击事件</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> t1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;t1&quot;</span>);</span></span><br><span class="line"><span class="javascript">      t1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">t1</span>)</span>&#123;</span></span><br><span class="line">        run1(t1);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;t1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1111&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>DOM绑定方式<br>&emsp;&emsp;优点：    使得HTML代码和JS代码完全分离<br>&emsp;&emsp;缺点：    ①不能传递参数。&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;解决:匿名函数是可以的<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; ②一个事件只能绑定一个函数&emsp;&emsp;解决:匿名函数内部是可以绑定多个函数</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Jave ee</tag>
        <tag>html</tag>
        <tag>css</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
</search>
