<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博客文章模板</title>
    <url>/2019/09/01/%E5%8D%9A%E5%AE%A2%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>观察者模式：秒杀启动案例（含Quartz的简单应用）</title>
    <url>/2020/07/16/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%9A%E7%A7%92%E6%9D%80%E5%90%AF%E5%8A%A8%E6%A1%88%E4%BE%8B%EF%BC%88%E5%90%ABQuartz%E7%9A%84%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>使用Quartz写一个简单的计时器，再使用观察者模式实现秒杀按钮启动的案例</p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>在某些重要的场景下，电商会开展定时秒杀活动，假设在6.18活动中携程网会对站内多种商品在同一时刻启动秒杀活动，请使用观察者模式，完成上述功能的设计类图和源码。<br><img src="https://img-blog.csdnimg.cn/20200715160551317.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_centerpic_center" alt="618携程秒杀按钮启动图" style="zoom: 33%;" /></p>
<h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>在这个案例里，我没有写出相应的界面，所有的功能都是使用类模拟相对应的模块，重点在于观察者模式的使用上。先上类图。这里我用Quartz写了一个简单的计时器，通过Cron表达式对秒杀时间进行设置。当系统到达秒杀的时间时，秒杀按钮才开启秒杀。然后封装两个ConcreteButton的具体观察者类来模拟秒杀模块的功能。<br><img src="https://img-blog.csdnimg.cn/20200715161644793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70#pic_center" alt="秒杀按钮启动类图"><br>上面的类图大致分为两个部分：其中的类QuartzSeckill主要与Client搭配实现计时器的功能，下面的5个类为观察者模式的实现，具体如下：</p>
<ul>
<li><p>Seckill：目标类（Subject），作为秒杀抽象目标类，其中的notifyseckill()为抽象通知方法；</p>
</li>
<li><p>SeckillTime：具体目标类（ConcreteSubject），通过继承Seckill类，实现具体的通知方法；</p>
</li>
<li><p>SeckillButton：观察者类（Observer）：对Seckill类的改变做出反应，声明了更新数据的抽象方法response()；</p>
</li>
<li><p>ConcreteButton、ConcreteButtonall：具体观察者类（ConcreteObserver），两个类的功能相同，都是实现SeckillButton类中response()的具体方法，只是两个类的一些方法上存在差异。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>以下是观察者模式的各个类，代码中含有解释的一些地方不再过多赘述：<br><strong>Seckill.java:</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 秒杀抽象目标类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Seckill</span> </span>&#123;</span><br><span class="line">	<span class="comment">//定义一个ArrayList，用来存放秒杀按钮</span></span><br><span class="line">    <span class="keyword">protected</span> ArrayList&lt;SeckillButton&gt; buttons = <span class="keyword">new</span> ArrayList&lt;SeckillButton&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//注册方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(SeckillButton button)</span></span>&#123;</span><br><span class="line">    	buttons.add(button);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//注销方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(SeckillButton button)</span></span>&#123;</span><br><span class="line">    	buttons.remove(button);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//抽象通知方法，通知更新所有的按键</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">notifyseckill</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">12345678910111213141516171819202122</span></span><br></pre></td></tr></table></figure>

<p><strong>SeckillTime.java:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体目标类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillTime</span> <span class="keyword">extends</span> <span class="title">Seckill</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//秒杀是否开始状态标志</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> SeckillStart;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyseckill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;618携程网的秒杀活动开始！&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;------------------&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span>(SeckillButton button:buttons)&#123;</span><br><span class="line">	           button.response();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1234567891011121314151617</span></span><br></pre></td></tr></table></figure>

<p><strong>SeckillButton.java:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象观察者类（抽象按钮）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SeckillButton</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">response</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure>

<p><strong>ConcreteButton.java:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体观察者类（按钮类）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteButton</span> <span class="keyword">implements</span> <span class="title">SeckillButton</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteButton</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">	  <span class="keyword">this</span>.name =name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取按键名称</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">response</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(name+<span class="string">&quot;按钮开始秒杀！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1234567891011121314151617181920</span></span><br></pre></td></tr></table></figure>

<p><strong>ConcreteButtonall.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体观察者类（all按钮类）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteButtonall</span> <span class="keyword">implements</span> <span class="title">SeckillButton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">response</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">		System.out.println(<span class="string">&quot;全网按钮开始秒杀！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">123456789101112</span></span><br></pre></td></tr></table></figure>

<p>做到这里其实已经基本实现了观察者模式了，如果不添加计时器，只需要再写一个以下的客户端类对各个类进行调用即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		Seckill seckill = <span class="keyword">new</span> SeckillTime();</span><br><span class="line">		</span><br><span class="line">		SeckillButton planeButton = <span class="keyword">new</span> ConcreteButton(<span class="string">&quot;机票&quot;</span>);</span><br><span class="line">		SeckillButton travelButton = <span class="keyword">new</span> ConcreteButton(<span class="string">&quot;门票&quot;</span>);</span><br><span class="line">		SeckillButton allButton = <span class="keyword">new</span> ConcreteButtonall();</span><br><span class="line">		</span><br><span class="line">		seckill.attach(planeButton);</span><br><span class="line">		seckill.attach(travelButton);</span><br><span class="line">		seckill.attach(allButton);</span><br><span class="line">		</span><br><span class="line">		seckill.notifyseckill();</span><br><span class="line">	&#125;</span><br><span class="line"><span class="number">1234567891011121314</span></span><br></pre></td></tr></table></figure>
<h2 id="Quartz设计计时器"><a href="#Quartz设计计时器" class="headerlink" title="Quartz设计计时器"></a>Quartz设计计时器</h2><p>但是这里如果我们要用Quartz写一个计时器，就要将上面的客户端类进行修改。先说一下Quartz的简单运用。</p>
<p>首先，需要导入Quartz需要的包。如果创建的项目是maven项目的话，可以在pom.xml文件中直接加上Quartz的依赖即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">  	&lt;dependency&gt;</span><br><span class="line">  		&lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;</span><br><span class="line">  		&lt;artifactId&gt;quartz&lt;/artifactId&gt;</span><br><span class="line">  		&lt;version&gt;2.2.1&lt;/version&gt;</span><br><span class="line">  	&lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure>

<p>如果不想建立maven项目，也可以自行下载jar包进行导入即可，我这里创建的是Web项目，所以直接将jar包导入到lib文件中即可，如果不是Web项目只需要自行创建一个lib文件就行，由于比较简单，这里就不说明了。<br><img src="https://img-blog.csdnimg.cn/20200716005334725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70" alt="Quartz依赖的jar包"><br>依赖的jar包可在这里<a href="https://blog.csdn.net/weixin_47211461/article/details/107362104">http://www.quartz-scheduler.org/</a>下载<br>如果网速不行可上<a href="https://blog.csdn.net/weixin_47211461/article/details/107362104">https://www.jb51.net/softs/539791.html</a>。<br>实际用到的jar包有三个：quartz-2.2.1.jar，c3p0-0.9.1.1.jar，slf4j-api-1.6.6.jar</p>
<p>Quartz的简单理解就是在什么时间去做什么事情，它的使用思路分为三步：</p>
<ol>
<li>job - 任务 - - 你要做什么事？</li>
<li>Trigger - 触发器 - - 你什么时候去做？</li>
<li>Scheduler - 任务调度 - - 你什么时候需要去做什么事？</li>
</ol>
<p>其中第3部是对前两步的整合，使其能合到一起，产生作用。要做一个开启秒杀按钮的计时器，我们就要先创建一个Job类，Job类中放的就是我们要做的事，这里我们需要它到预订的时间打开秒杀按钮，在观察者模式中也就是将上面客户端类的中目标类的通知方法notifyseckill()放到这个类中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Quartz计时器工作类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzSeckill</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext arg0)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">	<span class="comment">/*execute方法中为待做事务*/</span></span><br><span class="line">		<span class="comment">// 获取当前时间：</span></span><br><span class="line">		System.out.println(<span class="string">&quot;当前时间为：&quot;</span>+<span class="keyword">new</span> Date());</span><br><span class="line">		Seckill seckill = <span class="keyword">new</span> SeckillTime();</span><br><span class="line">		</span><br><span class="line">		SeckillButton planeButton = <span class="keyword">new</span> ConcreteButton(<span class="string">&quot;机票&quot;</span>);</span><br><span class="line">		SeckillButton travelButton = <span class="keyword">new</span> ConcreteButton(<span class="string">&quot;门票&quot;</span>);</span><br><span class="line">		SeckillButton allButton = <span class="keyword">new</span> ConcreteButtonall();</span><br><span class="line">		</span><br><span class="line">		seckill.attach(planeButton);</span><br><span class="line">		seckill.attach(travelButton);</span><br><span class="line">		seckill.attach(allButton);</span><br><span class="line">		</span><br><span class="line">		seckill.notifyseckill();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">123456789101112131415161718192021222324</span></span><br></pre></td></tr></table></figure>

<p>再写一个客户端类Client，分别创建Job、Trigger、Scheduler对象，完成对代办事务设置什么时间，要做的事情，以及将两者整合到一起的工作。具体看代码中的注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.quartz.CronScheduleBuilder;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobBuilder;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobDetail;</span><br><span class="line"><span class="keyword">import</span> org.quartz.Scheduler;</span><br><span class="line"><span class="keyword">import</span> org.quartz.SchedulerException;</span><br><span class="line"><span class="keyword">import</span> org.quartz.Trigger;</span><br><span class="line"><span class="keyword">import</span> org.quartz.TriggerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.quartz.impl.StdSchedulerFactory;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户测试类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 这里写一个最简单的设置秒杀时间的方法，如果作为Web秒杀系统的应用可以写个后台管理系统设置秒杀时间，</span></span><br><span class="line"><span class="comment">		 * 然后系统获取时间，再引cron表达式的转化模块，就可以添加到下面的计时器使用。</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		String[] str = <span class="keyword">new</span> String[<span class="number">5</span>];</span><br><span class="line">		System.out.print(<span class="string">&quot;请设置秒杀时间（月 日 时 分 秒）：&quot;</span>);</span><br><span class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">5</span> ; i++) &#123;</span><br><span class="line">            str[i]=in.next();</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;618携程网的秒杀活动将于2020年&quot;</span>+str[<span class="number">0</span>]+<span class="string">&quot;月&quot;</span>+str[<span class="number">1</span>]+<span class="string">&quot;日&quot;</span>+str[<span class="number">2</span>]+<span class="string">&quot;点&quot;</span>+str[<span class="number">3</span>]+<span class="string">&quot;分&quot;</span>+str[<span class="number">4</span>]+<span class="string">&quot;秒开始&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;当前时间为：&quot;</span>+<span class="keyword">new</span> Date());</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 通过Quartz设计一个简单的计时器</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="comment">//1.创建Job对象：做什么事？</span></span><br><span class="line">		JobDetail job = JobBuilder.newJob(QuartzSeckill.class).build();</span><br><span class="line">				</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 简单的trigger触发时间:通过Quartz提供的一个方法来完成简单的重复调用，下方注解的代码句</span></span><br><span class="line"><span class="comment">		 * cron Trigger:按照Cron的表达式来给定触发时间  	Cron表达式样式：&quot;0 05 23 8 7 ? *&quot;</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="comment">//2.创建Trigger对象，在什么时间做？</span></span><br><span class="line">		<span class="comment">/*Trigger trigger = TriggerBuilder.newTrigger().withSchedule(SimpleScheduleBuilder.repeatSecondlyForever()).build(); */</span></span><br><span class="line">				</span><br><span class="line">		Trigger trigger = TriggerBuilder.newTrigger().withSchedule(CronScheduleBuilder.cronSchedule(str[<span class="number">4</span>]+<span class="string">&quot; &quot;</span>+str[<span class="number">3</span>]+<span class="string">&quot; &quot;</span>+str[<span class="number">2</span>]+<span class="string">&quot; &quot;</span>+str[<span class="number">1</span>]+<span class="string">&quot; &quot;</span>+str[<span class="number">0</span>]+<span class="string">&quot; ? *&quot;</span>)).build();</span><br><span class="line">				</span><br><span class="line">		<span class="comment">//3.创建Scheduler对象，在什么时间做什么事？</span></span><br><span class="line">		Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line">		scheduler.scheduleJob(job, trigger);</span><br><span class="line">				</span><br><span class="line">		<span class="comment">//启动</span></span><br><span class="line">		scheduler.start();		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455</span></span><br></pre></td></tr></table></figure>

<h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p><img src="https://img-blog.csdnimg.cn/20200716013053889.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzIxMTQ2MQ==,size_16,color_FFFFFF,t_70" alt="运行结果图"><br>以上就是运用Quartz和观察者模式对于启动秒杀按钮案例的所有内容，仅作为学习笔记做记录。如果能帮助到你，是我荣幸。有错误的地方也请大家帮忙指正，谢谢！</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>观察者模式</tag>
        <tag>Quartz</tag>
      </tags>
  </entry>
</search>
